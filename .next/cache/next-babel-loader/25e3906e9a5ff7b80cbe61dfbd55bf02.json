{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport ProductCard from 'components/ProductCard/ProductCard';\nimport { ProductsRow, ProductsCol, ButtonWrapper, LoaderWrapper, LoaderItem, ProductCardWrapper } from './Products.style';\nimport { CURRENCY } from 'helper/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport Button from 'components/Button/Button';\nimport Loader from 'components/Loader/Loader';\nimport Placeholder from 'components/Placeholder/Placeholder';\nimport Fade from 'react-reveal/Fade';\nimport NoResultFound from 'components/NoResult/NoResult';\nimport Router from 'next/router';\nimport { GET_PRODUCTS } from 'graphql/query/product.query';\nimport { AuthContext } from 'contexts/auth/auth.context'; // import { getLocalState } from 'helper/localStorage';\n// import fakeDB from '../../helper/fakeDB';\n\nvar QuickView = dynamic(function () {\n  return import('../QuickView/QuickView');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../QuickView/QuickView')];\n    },\n    modules: ['../QuickView/QuickView']\n  }\n});\nexport var Products = function Products(props) {\n  var deviceType = props.deviceType,\n      type = props.type,\n      _props$fetchLimit = props.fetchLimit,\n      fetchLimit = _props$fetchLimit === void 0 ? 8 : _props$fetchLimit,\n      _props$loadMore = props.loadMore,\n      loadMore = _props$loadMore === void 0 ? true : _props$loadMore; // console.log(type, \"Hello\")\n\n  var router = useRouter();\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useQuery = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: router.query.type,\n      offset: 0,\n      limit: fetchLimit,\n      text: router.query.text,\n      category: router.query.category\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore; // console.log(data)\n  // Quick View Modal\n\n\n  var handleModalClose = function handleModalClose() {\n    var as = router.asPath;\n    router.push(as, as, {\n      shallow: true\n    });\n    closeModal();\n  };\n\n  var handleQuickViewModal = function handleQuickViewModal(modalProps, deviceType, onModalClose) {\n    if (router.pathname === '/product/[slug]') {\n      var _as = \"/product/\".concat(modalProps.slug);\n\n      router.push(router.pathname, _as);\n      return;\n    }\n\n    openModal({\n      show: true,\n      overlayClassName: 'quick-view-overlay',\n      closeOnClickOutside: false,\n      component: QuickView,\n      componentProps: {\n        modalProps: modalProps,\n        deviceType: deviceType,\n        onModalClose: onModalClose\n      },\n      closeComponent: 'div',\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'quick-view-modal',\n        width: 900,\n        y: 30,\n        height: 'auto',\n        transition: {\n          mass: 1,\n          tension: 0,\n          friction: 0\n        }\n      }\n    });\n    var href = router.asPath;\n    var as = \"/product/\".concat(modalProps.slug);\n    router.push(href, as, {\n      shallow: true\n    });\n  };\n\n  if (loading) {\n    return __jsx(LoaderWrapper, null, __jsx(LoaderItem, null, __jsx(Placeholder, null)), __jsx(LoaderItem, null, __jsx(Placeholder, null)), __jsx(LoaderItem, null, __jsx(Placeholder, null)));\n  }\n\n  var _useContext = useContext(AuthContext),\n      authDispatch = _useContext.authDispatch;\n\n  if (error) {\n    if (error.message === \"Network error: Failed to fetch\") {\n      return __jsx(\"div\", null, \"\\\"Network error!!!\\\"\");\n    }\n\n    if (error.message === \"GraphQL error: Error decoding signature\") {\n      Router.push('/logout');\n    } // console.log(error.message)\n\n\n    return null; // authDispatch({type:'SIGN_OUT'});\n    // return \"Error\"\n    // alert('Error' + error)\n  }\n\n  if (!data || !data.products || data.products.items.length === 0) {\n    return __jsx(NoResultFound, null);\n  }\n\n  var handleLoadMore = function handleLoadMore() {\n    toggleLoading(true);\n    fetchMore({\n      variables: {\n        offset: Number(data.products.items.length),\n        limit: fetchLimit\n      },\n      updateQuery: function updateQuery(prev, _ref) {\n        var fetchMoreResult = _ref.fetchMoreResult;\n        toggleLoading(false);\n\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return {\n          products: {\n            __typename: prev.products.__typename,\n            items: [].concat(_toConsumableArray(prev.products.items), _toConsumableArray(fetchMoreResult.products.items)),\n            hasMore: fetchMoreResult.products.hasMore\n          }\n        };\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ProductsRow, null, data.products.items.map(function (item, index) {\n    var _item$images$;\n\n    return __jsx(ProductsCol, {\n      key: index\n    }, function () {\n      item.discountInPercent = item.discountPercent;\n    }(), __jsx(ProductCardWrapper, null, __jsx(Fade, {\n      duration: 800,\n      delay: index * 10,\n      style: {\n        height: '100%'\n      }\n    }, __jsx(ProductCard, {\n      title: item.title,\n      description: item.description,\n      image: (_item$images$ = item.images[0]) === null || _item$images$ === void 0 ? void 0 : _item$images$.image,\n      weight: item.unit,\n      currency: CURRENCY,\n      price: item.price,\n      salePrice: item.salePrice,\n      discountInPercent: item.discountPercent,\n      data: item,\n      deviceType: deviceType,\n      link: '/product/' + item.slug,\n      onClick: function onClick() {\n        return handleQuickViewModal(item, deviceType, handleModalClose);\n      }\n    }))));\n  })), loadMore && data.hasMore && __jsx(ButtonWrapper, null, __jsx(Button, {\n    onClick: handleLoadMore,\n    title: \"Load More\",\n    intlButtonId: \"loadMoreBtn\",\n    size: \"small\",\n    isLoading: loadingMore,\n    loader: __jsx(Loader, {\n      color: \"#009E7F\"\n    }),\n    style: {\n      minWidth: 135,\n      backgroundColor: '#ffffff',\n      border: '1px solid #f1f1f1',\n      color: '#009E7F'\n    }\n  })));\n};\nexport default Products;","map":null,"metadata":{},"sourceType":"module"}