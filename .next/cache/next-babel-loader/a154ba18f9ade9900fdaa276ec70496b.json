{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  color: red;\\n  padding-bottom: 10px;\\n  margin-top: -5px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 54px;\\n  border-radius: 6px;\\n  font-family: \", \";\\n  border: 1px solid \", \";\\n  color: \", \";\\n  font-size: 16px;\\n  line-height: 19px;\\n  font-weight: 400;\\n  padding: 0 18px;\\n  box-sizing: border-box;\\n  transition: border-color 0.25s ease;\\n\\n  &:hover,\\n  &:focus {\\n    outline: 0;\\n  }\\n\\n  &:focus {\\n    border-color: \", \";\\n  }\\n\\n  &::placeholder {\\n    color: \", \";\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// import React, { useContext } from 'react';\n// import * as Yup from 'yup';\n// import { withFormik, FormikProps, Form, Formik } from 'formik';\n// import { closeModal } from '@redq/reuse-modal';\n// import TextField from 'components/TextField/TextField';\n// import Button from 'components/Button/Button';\n// import { useMutation } from '@apollo/react-hooks';\n// import { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\n// import { FieldWrapper, Heading } from './Update.style';\n// import { ProfileContext } from 'contexts/profile/profile.context';\n// // Shape of form values\n// interface FormValues {\n//   id?: number | null;\n//   name?: string;\n//   info?: string;\n// }\n// // The type of props MyForm receives\n// interface MyFormProps {\n//   item?: any | null;\n// }\n// const UpdateAddress = (props: FormikProps<FormValues> & MyFormProps) => {\n//   const {\n//     isValid,\n//     item,\n//     touched,\n//     errors,\n//   } = props;\n//   const addressValue = {\n//     id: item.id,\n//     type: 'secondary',\n//     name: item.name,\n//     info: item.info,\n//   };\n//   const { \n//     // state, \n//     dispatch \n//   } = useContext(ProfileContext);\n//   const [\n//     addressMutation, \n//     // { data }\n//   ] = useMutation((item & item.id) ?  UPDATE_ADDRESS : ADD_NEW_ADDRESS);\n//   const schema = Yup.object().shape({\n//     name: Yup.string().required('Title is required!'),\n//     info: Yup.string().required('Address is required'),\n//   })\n//   const handleSubmit = async () => {\n//     if (isValid) {\n//       await addressMutation({\n//         variables: addressValue,\n//       });\n//       // console.log(addressData, 'address data');\n//       dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\n//       closeModal();\n//     }\n//   };\n//   return (\n//     <Formik\n//       initialValues={addressValue}\n//       validationSchema={schema}\n//       onSubmit={handleSubmit}\n//     >\n//       {({\n//         values,\n//         handleChange,\n//         handleBlur,\n//         touched,\n//         errors,\n//       }: FormikProps<FormValues>) => (\n//         <Form>\n//           <Heading>{item && item.id ? 'Edit Address' : 'Add New Address'}</Heading>\n//           <FieldWrapper>\n//             <TextField\n//               id='name'\n//               type='text'\n//               placeholder='Enter Title'\n//               error={touched.name && errors.name}\n//               value={values.name}\n//               onChange={handleChange}\n//               onBlur={handleBlur}\n//             />\n//           </FieldWrapper>\n//           <FieldWrapper>\n//             <TextField\n//               id='info'\n//               as='textarea'\n//               placeholder='Enter Address'\n//               error={touched.info && errors.info}\n//               value={values.info}\n//               onChange={handleChange}\n//               onBlur={handleBlur}\n//             />\n//           </FieldWrapper>\n//           <Button\n//             type='submit'\n//             title='Save Address'\n//             size='medium'\n//             fullwidth={true}\n//           />\n//         </Form>\n//       )}\n//     </Formik>\n//   );\n// };\n// export default UpdateAddress;\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\nimport * as Yup from 'yup';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Formik, Form } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport Button from 'components/Button/Button';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport TextField from 'components/TextField/TextField';\nvar ContactValidationSchema = Yup.object().shape({\n  name: Yup.string().required('Number is required'),\n  info: Yup.string().required('Number is required')\n});\n\nvar UpdateAddress = function UpdateAddress(_ref) {\n  _s();\n\n  var item = _ref.item;\n  var initialValues = {\n    id: item.id || null,\n    type: item.type || 'secondary',\n    name: item.name || \"\",\n    info: item.info || \"\"\n  };\n\n  var _useMutation = useMutation(item && item.id ? UPDATE_ADDRESS : ADD_NEW_ADDRESS),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addAddressMutation = _useMutation2[0];\n\n  var _useContext = useContext(ProfileContext),\n      dispatch = _useContext.dispatch;\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n      var setSubmitting;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setSubmitting = _ref2.setSubmitting;\n              console.log(values);\n              _context.next = 4;\n              return addAddressMutation({\n                variables: {\n                  info: values.info,\n                  name: values.name\n                }\n              });\n\n            case 4:\n              // console.log(values, 'formik values');\n              dispatch({\n                type: 'ADD_OR_UPDATE_ADDRESS',\n                payload: values\n              });\n              closeModal();\n              setSubmitting(false);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: ContactValidationSchema,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var values = _ref4.values,\n        handleChange = _ref4.handleChange,\n        handleBlur = _ref4.handleBlur,\n        isSubmitting = _ref4.isSubmitting,\n        touched = _ref4.touched,\n        errors = _ref4.errors;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, __jsx(Heading, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, item && item.id ? 'Edit Address' : 'Add New Address'), __jsx(FieldWrapper, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 12\n      }\n    }, __jsx(TextField, {\n      id: \"name\",\n      type: \"text\",\n      placeholder: \"Enter Title\",\n      error: touched.name && errors.name,\n      value: values.name,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 14\n      }\n    })), __jsx(FieldWrapper, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 12\n      }\n    }, __jsx(TextField, {\n      id: \"info\",\n      as: \"textarea\",\n      placeholder: \"Enter Address\",\n      error: touched.info && errors.info,\n      value: values.info,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 14\n      }\n    })), __jsx(Button, {\n      disabled: isSubmitting,\n      type: \"submit\",\n      title: \"Save Contact\",\n      size: \"medium\",\n      fullwidth: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }));\n  });\n};\n\n_s(UpdateAddress, \"91RYJnJBbptMJ4D8A8Zteox2zaQ=\", false, function () {\n  return [useMutation];\n});\n\n_c = UpdateAddress;\nexport default UpdateAddress;\nvar StyledInput = styled.input(_templateObject(), themeGet('colors.fontFamily', 'Lato, sans-serif'), themeGet('colors.borderColor', '#e6e6e6'), themeGet('colors.darkBold', '#0D1136'), themeGet('colors.primary', '#009e7f'), themeGet('colorsdarkRegular', '#77798C'));\nvar StyledError = styled.div(_templateObject2());\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateAddress\");","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx"],"names":["React","useContext","styled","themeGet","Yup","closeModal","Formik","Form","useMutation","ProfileContext","Button","FieldWrapper","Heading","UPDATE_ADDRESS","ADD_NEW_ADDRESS","TextField","ContactValidationSchema","object","shape","name","string","required","info","UpdateAddress","item","initialValues","id","type","addAddressMutation","dispatch","handleSubmit","values","setSubmitting","console","log","variables","payload","handleChange","handleBlur","isSubmitting","touched","errors","StyledInput","input","StyledError","div"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAAoCC,MAApC,EAA4CC,IAA5C,QAAwD,QAAxD;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,SAASC,cAAT,QAA+B,kCAA/B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,YAAT,EAAuBC,OAAvB,QAAsC,gBAAtC;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,0BAAhD;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AAaA,IAAMC,uBAAuB,GAAGZ,GAAG,CAACa,MAAJ,GAAaC,KAAb,CAAmB;AACjDC,EAAAA,IAAI,EAAEf,GAAG,CAACgB,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB,CAD2C;AAEjDC,EAAAA,IAAI,EAAElB,GAAG,CAACgB,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB;AAF2C,CAAnB,CAAhC;;AAKA,IAAME,aAA8B,GAAG,SAAjCA,aAA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","sourcesContent":["// import React, { useContext } from 'react';\n// import * as Yup from 'yup';\n// import { withFormik, FormikProps, Form, Formik } from 'formik';\n// import { closeModal } from '@redq/reuse-modal';\n// import TextField from 'components/TextField/TextField';\n// import Button from 'components/Button/Button';\n// import { useMutation } from '@apollo/react-hooks';\n// import { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\n// import { FieldWrapper, Heading } from './Update.style';\n// import { ProfileContext } from 'contexts/profile/profile.context';\n\n// // Shape of form values\n// interface FormValues {\n//   id?: number | null;\n//   name?: string;\n//   info?: string;\n// }\n\n// // The type of props MyForm receives\n// interface MyFormProps {\n//   item?: any | null;\n// }\n\n// const UpdateAddress = (props: FormikProps<FormValues> & MyFormProps) => {\n//   const {\n//     isValid,\n//     item,\n//     touched,\n//     errors,\n//   } = props;\n//   const addressValue = {\n//     id: item.id,\n//     type: 'secondary',\n//     name: item.name,\n//     info: item.info,\n//   };\n//   const { \n//     // state, \n//     dispatch \n//   } = useContext(ProfileContext);\n\n//   const [\n//     addressMutation, \n//     // { data }\n//   ] = useMutation((item & item.id) ?  UPDATE_ADDRESS : ADD_NEW_ADDRESS);\n//   const schema = Yup.object().shape({\n//     name: Yup.string().required('Title is required!'),\n//     info: Yup.string().required('Address is required'),\n//   })\n//   const handleSubmit = async () => {\n//     if (isValid) {\n//       await addressMutation({\n//         variables: addressValue,\n//       });\n//       // console.log(addressData, 'address data');\n//       dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\n//       closeModal();\n//     }\n//   };\n//   return (\n//     <Formik\n//       initialValues={addressValue}\n//       validationSchema={schema}\n//       onSubmit={handleSubmit}\n//     >\n//       {({\n//         values,\n//         handleChange,\n//         handleBlur,\n//         touched,\n//         errors,\n//       }: FormikProps<FormValues>) => (\n//         <Form>\n//           <Heading>{item && item.id ? 'Edit Address' : 'Add New Address'}</Heading>\n//           <FieldWrapper>\n//             <TextField\n//               id='name'\n//               type='text'\n//               placeholder='Enter Title'\n//               error={touched.name && errors.name}\n//               value={values.name}\n//               onChange={handleChange}\n//               onBlur={handleBlur}\n//             />\n//           </FieldWrapper>\n\n//           <FieldWrapper>\n//             <TextField\n//               id='info'\n//               as='textarea'\n//               placeholder='Enter Address'\n//               error={touched.info && errors.info}\n//               value={values.info}\n//               onChange={handleChange}\n//               onBlur={handleBlur}\n//             />\n//           </FieldWrapper>\n\n//           <Button\n//             type='submit'\n//             title='Save Address'\n//             size='medium'\n//             fullwidth={true}\n//           />\n//         </Form>\n//       )}\n//     </Formik>\n//   );\n// };\n\n// export default UpdateAddress;\n\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\nimport * as Yup from 'yup';\nimport { closeModal } from '@redq/reuse-modal';\nimport { FormikProps, ErrorMessage, Formik, Form } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport MaskedInput from 'react-text-mask';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport Button from 'components/Button/Button';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport TextField from 'components/TextField/TextField';\n\ntype Props = {\n  item?: any | null;\n};\n// Shape of form values\ntype FormValues = {\n  id?: number | null;\n  type?: string;\n  name: string;\n  info: string;\n};\n\nconst ContactValidationSchema = Yup.object().shape({\n  name: Yup.string().required('Number is required'),\n  info: Yup.string().required('Number is required'),\n});\n\nconst UpdateAddress: React.FC<Props> = ({ item }) => {\n  const initialValues = {\n    id: item.id || null,\n    type: item.type || 'secondary',\n    name: item.name || \"\",\n    info: item.info || \"\",\n  };\n  const [addAddressMutation] = useMutation((item && item.id) ?  UPDATE_ADDRESS : ADD_NEW_ADDRESS);\n  const { \n    // state, \n  dispatch } = useContext(ProfileContext);\n  const handleSubmit = async (values: FormValues, { setSubmitting }: any) => {\n    console.log(values)\n    await addAddressMutation({\n      variables: {\n        info: values.info,\n        name: values.name,\n      },\n    });\n    // console.log(values, 'formik values');\n    dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: values });\n    closeModal();\n    setSubmitting(false);\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={ContactValidationSchema}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        isSubmitting,\n        touched,\n        errors\n      }: FormikProps<FormValues>) => (\n        <Form>\n          <Heading>{item && item.id ? 'Edit Address' : 'Add New Address'}</Heading>\n           <FieldWrapper>\n             <TextField\n               id='name'\n               type='text'\n               placeholder='Enter Title'\n               error={touched.name && errors.name}\n               value={values.name}\n               onChange={handleChange}\n               onBlur={handleBlur}\n             />\n           </FieldWrapper>\n\n           <FieldWrapper>\n             <TextField\n               id='info'\n               as='textarea'\n               placeholder='Enter Address'\n               error={touched.info && errors.info}\n               value={values.info}\n               onChange={handleChange}\n               onBlur={handleBlur}\n             />\n           </FieldWrapper>\n\n          <Button\n            disabled={isSubmitting}\n            type='submit'\n            title='Save Contact'\n            size='medium'\n            fullwidth={true}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default UpdateAddress;\n\nconst StyledInput = styled.input`\n  width: 100%;\n  height: 54px;\n  border-radius: 6px;\n  font-family: ${themeGet('colors.fontFamily', 'Lato, sans-serif')};\n  border: 1px solid ${themeGet('colors.borderColor', '#e6e6e6')};\n  color: ${themeGet('colors.darkBold', '#0D1136')};\n  font-size: 16px;\n  line-height: 19px;\n  font-weight: 400;\n  padding: 0 18px;\n  box-sizing: border-box;\n  transition: border-color 0.25s ease;\n\n  &:hover,\n  &:focus {\n    outline: 0;\n  }\n\n  &:focus {\n    border-color: ${themeGet('colors.primary', '#009e7f')};\n  }\n\n  &::placeholder {\n    color: ${themeGet('colorsdarkRegular', '#77798C')};\n  }\n`;\n\nconst StyledError = styled.div`\n  color: red;\n  padding-bottom: 10px;\n  margin-top: -5px;\n`;"]},"metadata":{},"sourceType":"module"}