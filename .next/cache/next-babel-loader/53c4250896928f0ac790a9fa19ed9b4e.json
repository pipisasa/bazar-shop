{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/pipi/Documents/pr/bazar-shop/contexts/language/language.provider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'styled/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nimport RTLPlugin from 'stylis-plugin-rtl';\nvar LanguageContext = React.createContext({});\nexport var LanguageProvider = function LanguageProvider(_ref) {\n  _s();\n\n  var children = _ref.children,\n      messages = _ref.messages,\n      initLocale = _ref.initLocale;\n\n  var _React$useState = React.useState(initLocale !== null && initLocale !== void 0 ? initLocale : 'en'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      locale = _React$useState2[0],\n      setLocale = _React$useState2[1];\n\n  var changeLanguage = function changeLanguage(newLocale) {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n\n  var isRtl = isRTL(locale);\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      locale: locale,\n      changeLanguage: changeLanguage,\n      isRtl: isRtl\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages[locale],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, __jsx(InjectRTL, {\n    lang: locale,\n    dir: isRtl ? 'rtl' : 'ltr',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(StyleSheetManager, {\n    stylisPlugins: isRtl ? [RTLPlugin] : [],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, children))));\n};\n\n_s(LanguageProvider, \"DyXcS5/xQQ0IZcggB9ZYyA5MxZc=\");\n\n_c = LanguageProvider;\nexport var useLocale = function useLocale() {\n  _s2();\n\n  return React.useContext(LanguageContext);\n};\n\n_s2(useLocale, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"sources":["/Users/pipi/Documents/pr/bazar-shop/contexts/language/language.provider.tsx"],"names":["React","IntlProvider","InjectRTL","Cookie","isRTL","StyleSheetManager","RTLPlugin","LanguageContext","createContext","LanguageProvider","children","messages","initLocale","useState","locale","setLocale","changeLanguage","newLocale","document","documentElement","lang","set","isRtl","useLocale","useContext"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,IAAMC,eAAe,GAAGP,KAAK,CAACQ,aAAN,CAAoB,EAApB,CAAxB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwC;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,wBAC1CZ,KAAK,CAACa,QAAN,CAAeD,UAAf,aAAeA,UAAf,cAAeA,UAAf,GAA6B,IAA7B,CAD0C;AAAA;AAAA,MAC/DE,MAD+D;AAAA,MACvDC,SADuD;;AAEtE,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAqB;AAC1CF,IAAAA,SAAS,CAACE,SAAD,CAAT;AACAC,IAAAA,QAAQ,CAACC,eAAT,CAAyBC,IAAzB,GAAgCH,SAAhC;AACAd,IAAAA,MAAM,CAACkB,GAAP,CAAW,QAAX,EAAqBJ,SAArB;AACD,GAJD;;AAKA,MAAIK,KAAK,GAAGlB,KAAK,CAACU,MAAD,CAAjB;AAEA,SACE,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAM,EAANA,MAAF;AAAUE,MAAAA,cAAc,EAAdA,cAAV;AAA0BM,MAAAA,KAAK,EAALA;AAA1B,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAER,MAAtB;AAA8B,IAAA,QAAQ,EAAEH,QAAQ,CAACG,MAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,IAAI,EAAEA,MAAjB;AAAyB,IAAA,GAAG,EAAEQ,KAAK,GAAG,KAAH,GAAW,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAmB,IAAA,aAAa,EAAEA,KAAK,GAAG,CAAChB,SAAD,CAAH,GAAiB,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QADH,CADF,CADF,CADF,CADF;AAWD,CApBM;;GAAMD,gB;;KAAAA,gB;AAsBb,OAAO,IAAMc,SAAS,GAAG,SAAZA,SAAY;AAAA;;AAAA,SAAMvB,KAAK,CAACwB,UAAN,CAAiBjB,eAAjB,CAAN;AAAA,CAAlB;;IAAMgB,S","sourcesContent":["import React from 'react';\n\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'styled/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nimport RTLPlugin from 'stylis-plugin-rtl';\n\nconst LanguageContext = React.createContext({} as any);\n\nexport const LanguageProvider = ({ children, messages, initLocale }) => {\n  const [locale, setLocale] = React.useState(initLocale ?? 'en');\n  const changeLanguage = (newLocale): void => {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n  let isRtl = isRTL(locale);\n\n  return (\n    <LanguageContext.Provider value={{ locale, changeLanguage, isRtl }}>\n      <IntlProvider locale={locale} messages={messages[locale]}>\n        <InjectRTL lang={locale} dir={isRtl ? 'rtl' : 'ltr'}>\n          <StyleSheetManager stylisPlugins={isRtl ? [RTLPlugin] : []}>\n            {children}\n          </StyleSheetManager>\n        </InjectRTL>\n      </IntlProvider>\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLocale = () => React.useContext(LanguageContext);\n"]},"metadata":{},"sourceType":"module"}