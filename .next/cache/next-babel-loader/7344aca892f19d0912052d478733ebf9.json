{"ast":null,"code":"var _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { Form, Formik } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/TextField/TextField';\nimport Button from 'components/Button/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { ProfileContext } from 'contexts/profile/profile.context'; // Shape of form values\n\nconst UpdateAddress = props => {\n  const {\n    isValid,\n    item,\n    touched,\n    errors\n  } = props;\n  const addressValue = {\n    id: item.id,\n    type: 'secondary',\n    name: item.name,\n    info: item.info\n  };\n  const {\n    // state, \n    dispatch\n  } = useContext(ProfileContext);\n  const [addressMutation // { data }\n  ] = useMutation(item & item.id ? UPDATE_ADDRESS : ADD_NEW_ADDRESS);\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Title is required!'),\n    info: Yup.string().required('Address is required')\n  });\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      await addressMutation({\n        variables: addressValue\n      }); // console.log(addressData, 'address data');\n\n      dispatch({\n        type: 'ADD_OR_UPDATE_ADDRESS',\n        payload: addressValue\n      });\n      closeModal();\n    }\n  };\n\n  return __jsx(Formik, {\n    initialValues: addressValue,\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, item && item.id ? 'Edit Address' : 'Add New Address'), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Enter Title\",\n    error: touched.name && errors.name,\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  })), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    id: \"info\",\n    as: \"textarea\",\n    placeholder: \"Enter Address\",\n    error: touched.info && errors.info,\n    value: values.info,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    title: \"Save Address\",\n    size: \"medium\",\n    fullwidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default UpdateAddress;","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx"],"names":["React","useContext","Yup","Form","Formik","closeModal","TextField","Button","useMutation","UPDATE_ADDRESS","ADD_NEW_ADDRESS","FieldWrapper","Heading","ProfileContext","UpdateAddress","props","isValid","item","touched","errors","addressValue","id","type","name","info","dispatch","addressMutation","schema","object","shape","string","required","handleSubmit","variables","payload","values","handleChange","handleBlur","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form, Formik } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/TextField/TextField';\nimport Button from 'components/Button/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\n\n// Shape of form values\ninterface FormValues {\n  id?: number | null;\n  name?: string;\n  info?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n}\n\nconst UpdateAddress = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    touched,\n    errors,\n  } = props;\n  const addressValue = {\n    id: item.id,\n    type: 'secondary',\n    name: item.name,\n    info: item.info,\n  };\n  const { \n    // state, \n    dispatch \n  } = useContext(ProfileContext);\n\n  const [\n    addressMutation, \n    // { data }\n  ] = useMutation((item & item.id) ?  UPDATE_ADDRESS : ADD_NEW_ADDRESS);\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Title is required!'),\n    info: Yup.string().required('Address is required'),\n  })\n  const handleSubmit = async () => {\n    if (isValid) {\n      await addressMutation({\n        variables: addressValue,\n      });\n      // console.log(addressData, 'address data');\n      dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\n      closeModal();\n    }\n  };\n  return (\n    <Formik\n      initialValues={addressValue}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        isSubmitting,\n      }: FormikProps<FormValues>) => (\n        <Form>\n          <Heading>{item && item.id ? 'Edit Address' : 'Add New Address'}</Heading>\n          <FieldWrapper>\n            <TextField\n              id='name'\n              type='text'\n              placeholder='Enter Title'\n              error={touched.name && errors.name}\n              value={values.name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n          </FieldWrapper>\n\n          <FieldWrapper>\n            <TextField\n              id='info'\n              as='textarea'\n              placeholder='Enter Address'\n              error={touched.info && errors.info}\n              value={values.info}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n          </FieldWrapper>\n\n          <Button\n            type='submit'\n            title='Save Address'\n            size='medium'\n            fullwidth={true}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default UpdateAddress;\n"]},"metadata":{},"sourceType":"module"}