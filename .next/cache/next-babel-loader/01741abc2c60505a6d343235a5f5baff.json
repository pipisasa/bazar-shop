{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/helper/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getLocalState } from './localStorage';\nvar apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _yield$import, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n                // we can use it in `PageComponent.getInitialProp`.\n\n                apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(ctx);\n\n              case 6:\n                pageProps = _context.sent;\n\n              case 7:\n                if (!false) {\n                  _context.next = 24;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 10:\n                if (!ssr) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return import('@apollo/react-ssr');\n\n              case 14:\n                _yield$import = _context.sent;\n                getDataFromTree = _yield$import.getDataFromTree;\n                _context.next = 18;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloClient: apolloClient\n                  }),\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 15\n                  }\n                }));\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n                // console.log({error})\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t0);\n\n              case 23:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 24:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloState: apolloState\n                }));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 20]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nvar httpLink = new HttpLink({\n  uri: process.env.API_URL,\n  // Server URL (must be absolute)\n  credentials: 'same-origin',\n  // Additional fetch() options like `credentials` or `headers`\n  fetch: fetch\n});\nvar authLink = setContext(function (_, _ref4) {\n  var _getLocalState;\n\n  var headers = _ref4.headers;\n  // get the authentication token from local storage if it exists\n  var token = ((_getLocalState = getLocalState('access_token')) === null || _getLocalState === void 0 ? void 0 : _getLocalState.token) || \"\"; // console.log(token, \"token\")\n  // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? \"JWT \".concat(token) : \"\"\n    })\n  };\n});\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/helper/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","setContext","fetch","getLocalState","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","httpLink","uri","process","env","API_URL","credentials","authLink","_","headers","token","authorization","ssrMode","link","concat","restore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getLocalState } from './localStorage';\n\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient());\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            );\n          } catch (error) {\n            // console.log({error})\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\n\n\nconst httpLink = new HttpLink({\n  uri: process.env.API_URL, // Server URL (must be absolute)\n  credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n  fetch,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = getLocalState('access_token')?.token || \"\";\n  // console.log(token, \"token\")\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `JWT ${token}` : \"\",\n    }\n  }\n});\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}