{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState } from 'react';\nimport Link from 'next/link';\nimport { Button, Wrapper, Container, Heading, SubHeading, HelperText, Offer, Input, Divider, LinkButton } from './SignInOutForm.style';\nimport { Facebook, Google } from 'components/AllSvgIcon';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage } from 'react-intl';\nimport { CREATE_USER } from '../../graphql/mutation/user';\nimport { useMutation } from '@apollo/react-hooks';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nconst a = 0;\n\nclass FakeProgressBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n\n    _defineProperty(this, \"intervalId\", null);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.intervalId = setInterval(() => {\n        if (this.state.count >= 50) {\n          clearInterval(this.intervalId);\n        }\n\n        ;\n        this.setState({\n          count: this.state.count + 30\n        });\n      }, 300);\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      clearInterval(this.intervalId);\n    });\n  }\n\n  render() {\n    return __jsx(ProgressBar, {\n      total: 100,\n      completed: this.state.count\n    });\n  }\n\n}\n\nexport default function SignOutModal() {\n  const {\n    authDispatch,\n    authState\n  } = useContext(AuthContext);\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const [registerMutation] = useMutation(CREATE_USER);\n\n  const registerCallback = async e => {\n    e.preventDefault();\n    authDispatch({\n      type: 'LOADING'\n    });\n\n    try {\n      const {\n        data: {\n          createUser: {\n            message\n          }\n        }\n      } = await registerMutation({\n        variables: {\n          email,\n          password\n        }\n      });\n      authDispatch({\n        type: 'SIGNUP_SUCCESS'\n      });\n    } catch (err) {\n      // console.log({err})\n      authDispatch({\n        type: 'SIGNUP_ERROR',\n        payload: err.message\n      });\n    }\n  };\n\n  const toggleSignInForm = () => {\n    authDispatch({\n      type: 'SIGNIN'\n    });\n  };\n\n  return __jsx(Wrapper, null, __jsx(Container, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"signUpBtnText\",\n    defaultMessage: \"Sign Up\"\n  })), __jsx(SubHeading, null, __jsx(FormattedMessage, {\n    id: \"signUpText\",\n    defaultMessage: \"Every fill is required in sign up\"\n  })), authState.currentForm === 'loading' && __jsx(FakeProgressBar, null), authState.error && __jsx(\"span\", {\n    style: {\n      color: \"red\"\n    }\n  }, \"*This email already exists\"), __jsx(\"form\", {\n    onSubmit: registerCallback\n  }, __jsx(FormattedMessage, {\n    id: \"emailAddressPlaceholder\",\n    defaultMessage: \"Email Address or Contact No.\"\n  }, placeholder => __jsx(Input, {\n    type: \"email\",\n    placeholder: placeholder,\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    required: true\n  })), __jsx(FormattedMessage, {\n    id: \"passwordPlaceholder\",\n    defaultMessage: \"Password (min 6 characters)\",\n    values: {\n      minCharacter: 6\n    }\n  }, placeholder => __jsx(Input, {\n    type: \"text\",\n    placeholder: placeholder,\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    min: 6,\n    required: true\n  })), __jsx(HelperText, {\n    style: {\n      padding: '20px 0 30px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"signUpText\",\n    defaultMessage: \"By signing up, you agree to Pickbazar's\"\n  }), ' ', __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, __jsx(FormattedMessage, {\n    id: \"termsConditionText\",\n    defaultMessage: \"Terms & Condtion\"\n  })))), __jsx(Button, {\n    fullwidth: true,\n    title: 'Continue',\n    intlButtonId: \"continueBtn\",\n    style: {\n      color: '#fff'\n    },\n    type: \"submit\"\n  })), __jsx(Divider, null, __jsx(\"span\", null, __jsx(FormattedMessage, {\n    id: \"orText\",\n    defaultMessage: \"or\"\n  }))), __jsx(Button, {\n    fullwidth: true,\n    title: 'Continue with Facebook',\n    iconPosition: \"left\",\n    className: \"facebook\",\n    icon: __jsx(Facebook, null),\n    iconStyle: {\n      color: '#ffffff',\n      marginRight: 5\n    },\n    intlButtonId: \"continueFacebookBtn\",\n    style: {\n      color: '#fff'\n    }\n  }), __jsx(Button, {\n    fullwidth: true,\n    title: 'Continue with Google',\n    className: \"google\",\n    iconPosition: \"left\",\n    icon: __jsx(Google, null),\n    iconStyle: {\n      color: '#ffffff',\n      marginRight: 5\n    },\n    intlButtonId: \"continueGoogleBtn\",\n    style: {\n      color: '#fff'\n    }\n  }), __jsx(Offer, {\n    style: {\n      padding: '20px 0'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"alreadyHaveAccount\",\n    defaultMessage: \"Already have an account?\"\n  }), ' ', __jsx(LinkButton, {\n    onClick: toggleSignInForm\n  }, __jsx(FormattedMessage, {\n    id: \"loginBtnText\",\n    defaultMessage: \"Login\"\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}