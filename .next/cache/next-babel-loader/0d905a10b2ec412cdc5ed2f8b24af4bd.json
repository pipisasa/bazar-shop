{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CartPopupBody, PopupHeader, PopupItemCount, CloseButton, PromoCode, CheckoutButtonWrapper, CheckoutButton, Title, PriceBox, NoProductMsg, ItemWrapper, CouponBoxWrapper, CouponCode, ErrorMsg } from './CartItemCard.style';\nimport { CloseIcon } from 'components/AllSvgIcon';\nimport { ShoppingBagLarge } from 'components/AllSvgIcon';\nimport { CURRENCY } from 'helper/constant';\nimport { FormattedMessage } from 'react-intl';\nimport { useLocale } from 'contexts/language/language.provider';\nimport CouponBox from 'components/CouponBox/CouponBox';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useCart } from 'contexts/cart/use-cart';\nimport { CartItem } from './CartItem/CartItem';\nconst APPLY_COUPON = gql`\n  mutation applyCoupon($code: String!) {\n    applyCoupon(code: $code) {\n      id\n      code\n      discountInPercent\n    }\n  }\n`;\n\nconst Cart = ({\n  style,\n  className,\n  onCloseBtnClick,\n  scrollbarHeight\n}) => {\n  const {\n    items,\n    coupon,\n    addItem,\n    removeItem,\n    removeItemFromCart,\n    cartItemsCount,\n    calculatePrice,\n    applyCoupon\n  } = useCart();\n  const {\n    0: couponText,\n    1: setCoupon\n  } = useState('');\n  const {\n    0: displayCoupon,\n    1: showCoupon\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const [applyedCoupon] = useMutation(APPLY_COUPON);\n  const {\n    isRtl\n  } = useLocale();\n\n  const handleApplyCoupon = async () => {\n    const {\n      data\n    } = await applyedCoupon({\n      variables: {\n        code: couponText\n      }\n    });\n\n    if (data.applyCoupon && data.applyCoupon.discountInPercent) {\n      setError('');\n      applyCoupon(data.applyCoupon);\n      setCoupon('');\n    } else {\n      setError('Invalid Coupon');\n    }\n  };\n\n  const handleChange = value => {\n    setCoupon(value);\n  };\n\n  const toggleCoupon = () => {\n    showCoupon(true);\n  };\n\n  return __jsx(CartPopupBody, {\n    className: className,\n    style: style\n  }, __jsx(PopupHeader, null, __jsx(PopupItemCount, null, __jsx(ShoppingBagLarge, {\n    width: \"19px\",\n    height: \"24px\"\n  }), __jsx(\"span\", null, cartItemsCount, \"\\xA0\", cartItemsCount > 1 ? __jsx(FormattedMessage, {\n    id: \"cartItems\",\n    defaultMessage: \"items\"\n  }) : __jsx(FormattedMessage, {\n    id: \"cartItem\",\n    defaultMessage: \"item\"\n  }))), __jsx(CloseButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(CloseIcon, null))), __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: scrollbarHeight,\n    renderView: props => __jsx(\"div\", _extends({}, props, {\n      style: _objectSpread(_objectSpread({}, props.style), {}, {\n        marginLeft: isRtl ? props.style.marginRight : 0,\n        marginRight: isRtl ? 0 : props.style.marginRight\n      })\n    }))\n  }, __jsx(ItemWrapper, null, !!cartItemsCount ? items.map(item => __jsx(CartItem, {\n    key: `cartItem-${item.id}`,\n    onIncrement: () => addItem(item),\n    onDecrement: () => removeItem(item),\n    onRemove: () => removeItemFromCart(item),\n    data: item\n  })) : __jsx(NoProductMsg, null, __jsx(FormattedMessage, {\n    id: \"noProductFound\",\n    defaultMessage: \"No products found\"\n  })))), __jsx(CheckoutButtonWrapper, null, __jsx(PromoCode, null, !(coupon === null || coupon === void 0 ? void 0 : coupon.discountInPercent) ? __jsx(React.Fragment, null, !displayCoupon ? __jsx(\"button\", {\n    onClick: toggleCoupon\n  }, __jsx(FormattedMessage, {\n    id: \"specialCode\",\n    defaultMessage: \"Have a special code?\"\n  })) : __jsx(CouponBoxWrapper, null, __jsx(CouponBox, {\n    onUpdate: handleChange,\n    value: couponText,\n    onClick: handleApplyCoupon,\n    disabled: !couponText.length || !items.length,\n    buttonTitle: \"Apply\",\n    intlCouponBoxPlaceholder: \"couponPlaceholder\",\n    style: {\n      boxShadow: '0 3px 6px rgba(0, 0, 0, 0.06)'\n    }\n  }), error ? __jsx(ErrorMsg, null, error) : '')) : __jsx(CouponCode, null, __jsx(FormattedMessage, {\n    id: \"couponApplied\",\n    defaultMessage: \"Coupon Applied\"\n  }), __jsx(\"span\", null, coupon.code))), cartItemsCount !== 0 ? __jsx(Link, {\n    href: \"/checkout\"\n  }, __jsx(CheckoutButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, calculatePrice())))) : __jsx(CheckoutButton, null, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, calculatePrice())))));\n};\n\nexport default Cart;","map":null,"metadata":{},"sourceType":"module"}