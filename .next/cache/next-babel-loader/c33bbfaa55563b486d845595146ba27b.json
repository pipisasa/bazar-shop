{"ast":null,"code":"var _jsxFileName = \"/Users/pipi/Documents/pr/bazar-shop/containers/Cart/CartPopUp.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport CartItem from './Cart';\nimport CartPopupButton, { BoxedCartButton } from 'components/CartPopup/CartPopupButton';\nimport { CURRENCY } from 'helper/constant';\nimport { CartSlidePopup } from './CartItemCard.style';\nimport { FormattedMessage } from 'react-intl';\nimport { useCart } from 'contexts/cart/use-cart';\nconst CartPopupStyle = createGlobalStyle`\n  .cartPopup{\n    top: auto !important;\n    left: auto !important;\n    bottom: 50px !important;\n    right: 50px !important;\n    box-shadow: 0 21px 36px rgba(0, 0, 0, 0.16);\n    transform-origin: bottom right;\n\n    @media (max-width: 767px) {\n      max-width: none!important;\n      width: 100% !important;\n      bottom: 0 !important;\n      left: 0!important;\n      background: #fff;\n      overflow: initial !important;\n      transform-origin: bottom center;\n    }\n  }\n`;\n\nconst CartPopUp = ({\n  deviceType: {\n    mobile,\n    tablet,\n    desktop\n  }\n}) => {\n  const {\n    isOpen,\n    cartItemsCount,\n    toggleCart,\n    calculatePrice\n  } = useCart();\n\n  const handleModal = () => {\n    openModal({\n      show: true,\n      config: {\n        className: 'cartPopup',\n        width: 'auto',\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        transition: {\n          tension: 360,\n          friction: 40\n        }\n      },\n      closeOnClickOutside: true,\n      component: CartItem,\n      closeComponent: () => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }\n      }),\n      componentProps: {\n        onCloseBtnClick: closeModal,\n        scrollbarHeight: 370\n      }\n    });\n  };\n\n  let cartSliderClass = isOpen === true ? 'cartPopupFixed' : '';\n  return __jsx(React.Fragment, null, mobile || tablet ? __jsx(React.Fragment, null, __jsx(CartPopupStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), __jsx(CartPopupButton, {\n    className: \"product-cart\",\n    itemCount: cartItemsCount,\n    itemPostfix: cartItemsCount > 1 ? __jsx(FormattedMessage, {\n      id: \"cartItems\",\n      defaultMessage: \"items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }) : __jsx(FormattedMessage, {\n      id: \"cartItem\",\n      defaultMessage: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }),\n    price: calculatePrice(),\n    pricePrefix: \"$\",\n    onClick: handleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })) : __jsx(React.Fragment, null, __jsx(CartSlidePopup, {\n    className: cartSliderClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, isOpen && __jsx(CartItem, {\n    onCloseBtnClick: toggleCart,\n    scrollbarHeight: \"100vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  })), __jsx(BoxedCartButton, {\n    className: \"product-cart\",\n    itemCount: cartItemsCount,\n    itemPostfix: cartItemsCount > 1 ? __jsx(FormattedMessage, {\n      id: \"cartItems\",\n      defaultMessage: \"items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }) : __jsx(FormattedMessage, {\n      id: \"cartItem\",\n      defaultMessage: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }),\n    price: calculatePrice(),\n    pricePrefix: CURRENCY,\n    onClick: toggleCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default CartPopUp;","map":{"version":3,"sources":["/Users/pipi/Documents/pr/bazar-shop/containers/Cart/CartPopUp.tsx"],"names":["React","createGlobalStyle","openModal","closeModal","CartItem","CartPopupButton","BoxedCartButton","CURRENCY","CartSlidePopup","FormattedMessage","useCart","CartPopupStyle","CartPopUp","deviceType","mobile","tablet","desktop","isOpen","cartItemsCount","toggleCart","calculatePrice","handleModal","show","config","className","width","height","enableResizing","disableDragging","transition","tension","friction","closeOnClickOutside","component","closeComponent","componentProps","onCloseBtnClick","scrollbarHeight","cartSliderClass"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport CartItem from './Cart';\nimport CartPopupButton, {\n  BoxedCartButton,\n} from 'components/CartPopup/CartPopupButton';\nimport { CURRENCY } from 'helper/constant';\nimport { CartSlidePopup } from './CartItemCard.style';\nimport { FormattedMessage } from 'react-intl';\nimport { useCart } from 'contexts/cart/use-cart';\n\nconst CartPopupStyle = createGlobalStyle`\n  .cartPopup{\n    top: auto !important;\n    left: auto !important;\n    bottom: 50px !important;\n    right: 50px !important;\n    box-shadow: 0 21px 36px rgba(0, 0, 0, 0.16);\n    transform-origin: bottom right;\n\n    @media (max-width: 767px) {\n      max-width: none!important;\n      width: 100% !important;\n      bottom: 0 !important;\n      left: 0!important;\n      background: #fff;\n      overflow: initial !important;\n      transform-origin: bottom center;\n    }\n  }\n`;\n\ntype CartProps = {\n  deviceType: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst CartPopUp: React.FC<CartProps> = ({\n  deviceType: { mobile, tablet, desktop },\n}) => {\n  const { isOpen, cartItemsCount, toggleCart, calculatePrice } = useCart();\n\n  const handleModal = () => {\n    openModal({\n      show: true,\n      config: {\n        className: 'cartPopup',\n        width: 'auto',\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        transition: {\n          tension: 360,\n          friction: 40,\n        },\n      },\n      closeOnClickOutside: true,\n      component: CartItem,\n      closeComponent: () => <div />,\n      componentProps: { onCloseBtnClick: closeModal, scrollbarHeight: 370 },\n    });\n  };\n\n  let cartSliderClass = isOpen === true ? 'cartPopupFixed' : '';\n\n  return (\n    <>\n      {mobile || tablet ? (\n        <>\n          <CartPopupStyle />\n          <CartPopupButton\n            className='product-cart'\n            itemCount={cartItemsCount}\n            itemPostfix={\n              cartItemsCount > 1 ? (\n                <FormattedMessage id='cartItems' defaultMessage='items' />\n              ) : (\n                <FormattedMessage id='cartItem' defaultMessage='item' />\n              )\n            }\n            price={calculatePrice()}\n            pricePrefix='$'\n            onClick={handleModal}\n          />\n        </>\n      ) : (\n        <>\n          <CartSlidePopup className={cartSliderClass}>\n            {isOpen && (\n              <CartItem onCloseBtnClick={toggleCart} scrollbarHeight='100vh' />\n            )}\n          </CartSlidePopup>\n\n          <BoxedCartButton\n            className='product-cart'\n            itemCount={cartItemsCount}\n            itemPostfix={\n              cartItemsCount > 1 ? (\n                <FormattedMessage id='cartItems' defaultMessage='items' />\n              ) : (\n                <FormattedMessage id='cartItem' defaultMessage='item' />\n              )\n            }\n            price={calculatePrice()}\n            pricePrefix={CURRENCY}\n            onClick={toggleCart}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CartPopUp;\n"]},"metadata":{},"sourceType":"module"}