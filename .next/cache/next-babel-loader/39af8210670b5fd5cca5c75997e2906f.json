{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from 'theme';\nimport { AuthProvider } from 'contexts/auth/auth.provider';\nimport { StickyProvider } from 'contexts/app/app.provider';\nimport { SearchProvider } from 'contexts/search/search.provider';\nimport { HeaderProvider } from 'contexts/header/header.provider';\nimport { LanguageProvider } from 'contexts/language/language.provider';\nimport AppLayout from 'containers/LayoutContainer/AppLayout';\nimport { useDeviceType } from 'helper/useDeviceType';\nimport { CartProvider } from 'contexts/cart/use-cart'; // Language translation files\n\nimport localEn from 'data/translation/en.json';\nimport localAr from 'data/translation/ar.json';\nimport localEs from 'data/translation/es.json';\nimport localDe from 'data/translation/de.json';\nimport localCn from 'data/translation/zh.json';\nimport localIl from 'data/translation/he.json'; // External CSS import here\n\nimport 'rc-drawer/assets/index.css';\nimport 'rc-table/assets/index.css';\nimport 'rc-collapse/assets/index.css';\nimport 'react-multi-carousel/lib/styles.css';\nimport 'components/MultiCarousel/MultiCarousel.style.css';\nimport '@redq/reuse-modal/lib/index.css';\nimport { GlobalStyle } from 'styled/global.style';\nimport { parseCookies } from 'helper/parse-cookies'; // Language translation Config\n\nvar messages = {\n  en: localEn,\n  ar: localAr,\n  es: localEs,\n  de: localDe,\n  zh: localCn,\n  he: localIl\n}; // need to provide types\n\nexport default function ExtendedApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      userAgent = _ref.userAgent,\n      locale = _ref.locale,\n      query = _ref.query;\n  var deviceType = useDeviceType(userAgent);\n  return __jsx(ThemeProvider, {\n    theme: theme\n  }, __jsx(LanguageProvider, {\n    messages: messages,\n    initLocale: locale\n  }, __jsx(CartProvider, null, __jsx(SearchProvider, {\n    query: query\n  }, __jsx(HeaderProvider, null, __jsx(StickyProvider, null, __jsx(AuthProvider, null, __jsx(React.Fragment, null, __jsx(AppLayout, {\n    deviceType: deviceType\n  }, __jsx(Component, _extends({}, pageProps, {\n    deviceType: deviceType\n  }))), __jsx(GlobalStyle, null)))))))));\n}\n\nExtendedApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(appContext) {\n    var appProps, _appContext$ctx, req, query, userAgent, _parseCookies, locale;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return App.getInitialProps(appContext);\n\n          case 2:\n            appProps = _context.sent;\n            _appContext$ctx = appContext.ctx, req = _appContext$ctx.req, query = _appContext$ctx.query;\n            userAgent = req ? req.headers['user-agent'] : navigator.userAgent;\n            _parseCookies = parseCookies(req), locale = _parseCookies.locale;\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, appProps), {}, {\n              userAgent: userAgent,\n              query: query,\n              locale: locale\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}