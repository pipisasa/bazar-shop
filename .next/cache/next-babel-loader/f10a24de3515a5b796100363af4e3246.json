{"ast":null,"code":"var _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/containers/Cart/CartPopUp.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport CartItem from './Cart';\nimport { CartSlidePopup, CartPopupBack } from './CartItemCard.style';\nimport { useCart } from 'contexts/cart/use-cart';\nconst CartPopupStyle = createGlobalStyle`\n  .cartPopup{\n    top: auto !important;\n    left: auto !important;\n    bottom: 50px !important;\n    right: 50px !important;\n    box-shadow: 0 21px 36px rgba(0, 0, 0, 0.16);\n    transform-origin: bottom right;\n\n    @media (max-width: 767px) {\n      max-width: none!important;\n      width: 100% !important;\n      bottom: 0 !important;\n      left: 0!important;\n      background: #fff;\n      overflow: initial !important;\n      transform-origin: bottom center;\n    }\n  }\n`;\n\nconst CartPopUp = ({\n  deviceType: {\n    mobile,\n    tablet,\n    desktop\n  }\n}) => {\n  const {\n    isOpen,\n    cartItemsCount,\n    toggleCart,\n    calculatePrice\n  } = useCart();\n\n  const handleModal = () => {\n    openModal({\n      show: true,\n      config: {\n        className: 'cartPopup',\n        width: 'auto',\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        transition: {\n          tension: 360,\n          friction: 40\n        }\n      },\n      closeOnClickOutside: true,\n      component: CartItem,\n      closeComponent: () => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }\n      }),\n      componentProps: {\n        onCloseBtnClick: closeModal,\n        scrollbarHeight: 370\n      }\n    });\n  };\n\n  let cartSliderClass = isOpen === true ? 'cartPopupFixed' : '';\n  return __jsx(React.Fragment, null, mobile || tablet ? __jsx(React.Fragment, null, __jsx(CartPopupStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })) : __jsx(React.Fragment, null, __jsx(CartPopupBack, {\n    onClick: e => {\n      if (e.target === e.currentTarget) {\n        toggleCart();\n      }\n    },\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(CartSlidePopup, {\n    className: cartSliderClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, isOpen && __jsx(CartItem, {\n    onCloseBtnClick: toggleCart,\n    scrollbarHeight: \"100vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  })))));\n};\n\nexport default CartPopUp;","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/containers/Cart/CartPopUp.tsx"],"names":["React","createGlobalStyle","openModal","closeModal","CartItem","CartSlidePopup","CartPopupBack","useCart","CartPopupStyle","CartPopUp","deviceType","mobile","tablet","desktop","isOpen","cartItemsCount","toggleCart","calculatePrice","handleModal","show","config","className","width","height","enableResizing","disableDragging","transition","tension","friction","closeOnClickOutside","component","closeComponent","componentProps","onCloseBtnClick","scrollbarHeight","cartSliderClass","e","target","currentTarget"],"mappings":";;AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,mBAAtC;AACA,OAAOC,QAAP,MAAqB,QAArB;AAKA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,sBAA9C;AAEA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,MAAMC,cAAc,GAAGP,iBAAkB;;;;;;;;;;;;;;;;;;;CAAzC;;AA6BA,MAAMQ,SAA8B,GAAG,CAAC;AACtCC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB;AAD0B,CAAD,KAEjC;AACJ,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,cAAV;AAA0BC,IAAAA,UAA1B;AAAsCC,IAAAA;AAAtC,MAAyDV,OAAO,EAAtE;;AAEA,QAAMW,WAAW,GAAG,MAAM;AACxBhB,IAAAA,SAAS,CAAC;AACRiB,MAAAA,IAAI,EAAE,IADE;AAERC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE,WADL;AAENC,QAAAA,KAAK,EAAE,MAFD;AAGNC,QAAAA,MAAM,EAAE,MAHF;AAINC,QAAAA,cAAc,EAAE,KAJV;AAKNC,QAAAA,eAAe,EAAE,IALX;AAMNC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE,GADC;AAEVC,UAAAA,QAAQ,EAAE;AAFA;AANN,OAFA;AAaRC,MAAAA,mBAAmB,EAAE,IAbb;AAcRC,MAAAA,SAAS,EAAE1B,QAdH;AAeR2B,MAAAA,cAAc,EAAE,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfd;AAgBRC,MAAAA,cAAc,EAAE;AAAEC,QAAAA,eAAe,EAAE9B,UAAnB;AAA+B+B,QAAAA,eAAe,EAAE;AAAhD;AAhBR,KAAD,CAAT;AAkBD,GAnBD;;AAqBA,MAAIC,eAAe,GAAGrB,MAAM,KAAK,IAAX,GAAkB,gBAAlB,GAAqC,EAA3D;AAEA,SACE,4BACGH,MAAM,IAAIC,MAAV,GACC,4BACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,GAmBC,4BACE,MAAC,aAAD;AAAe,IAAA,OAAO,EAAGwB,CAAD,IAAK;AAAC,UAAGA,CAAC,CAACC,MAAF,KAAaD,CAAC,CAACE,aAAlB,EAAgC;AAACtB,QAAAA,UAAU;AAAG;AAAC,KAA7E;AAA+E,IAAA,MAAM,EAAEF,MAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEqB,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,MAAM,IACL,MAAC,QAAD;AAAU,IAAA,eAAe,EAAEE,UAA3B;AAAuC,IAAA,eAAe,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF,CADF,CApBJ,CADF;AAgDD,CA5ED;;AA8EA,eAAeP,SAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport CartItem from './Cart';\nimport CartPopupButton, {\n  BoxedCartButton,\n} from 'components/CartPopup/CartPopupButton';\nimport { CURRENCY } from 'helper/constant';\nimport { CartSlidePopup, CartPopupBack } from './CartItemCard.style';\nimport { FormattedMessage } from 'react-intl';\nimport { useCart } from 'contexts/cart/use-cart';\n\nconst CartPopupStyle = createGlobalStyle`\n  .cartPopup{\n    top: auto !important;\n    left: auto !important;\n    bottom: 50px !important;\n    right: 50px !important;\n    box-shadow: 0 21px 36px rgba(0, 0, 0, 0.16);\n    transform-origin: bottom right;\n\n    @media (max-width: 767px) {\n      max-width: none!important;\n      width: 100% !important;\n      bottom: 0 !important;\n      left: 0!important;\n      background: #fff;\n      overflow: initial !important;\n      transform-origin: bottom center;\n    }\n  }\n`;\n\ntype CartProps = {\n  deviceType: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst CartPopUp: React.FC<CartProps> = ({\n  deviceType: { mobile, tablet, desktop },\n}) => {\n  const { isOpen, cartItemsCount, toggleCart, calculatePrice } = useCart();\n\n  const handleModal = () => {\n    openModal({\n      show: true,\n      config: {\n        className: 'cartPopup',\n        width: 'auto',\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        transition: {\n          tension: 360,\n          friction: 40,\n        },\n      },\n      closeOnClickOutside: true,\n      component: CartItem,\n      closeComponent: () => <div />,\n      componentProps: { onCloseBtnClick: closeModal, scrollbarHeight: 370 },\n    });\n  };\n\n  let cartSliderClass = isOpen === true ? 'cartPopupFixed' : '';\n\n  return (\n    <>\n      {mobile || tablet ? (\n        <>\n          <CartPopupStyle />\n          {/* <CartPopupButton\n            className='product-cart'\n            itemCount={cartItemsCount}\n            itemPostfix={\n              cartItemsCount > 1 ? (\n                <FormattedMessage id='cartItems' defaultMessage='items' />\n              ) : (\n                <FormattedMessage id='cartItem' defaultMessage='item' />\n              )\n            }\n            price={calculatePrice()}\n            pricePrefix='$'\n            onClick={handleModal}\n          /> */}\n        </>\n      ) : (\n        <>\n          <CartPopupBack onClick={(e)=>{if(e.target === e.currentTarget){toggleCart()}}} isOpen={isOpen}>\n            <CartSlidePopup className={cartSliderClass}>\n              {isOpen && (\n                <CartItem onCloseBtnClick={toggleCart} scrollbarHeight='100vh' />\n              )}\n            </CartSlidePopup>\n          </CartPopupBack>\n\n          {/* <BoxedCartButton\n            className='product-cart'\n            itemCount={cartItemsCount}\n            itemPostfix={\n              cartItemsCount > 1 ? (\n                <FormattedMessage id='cartItems' defaultMessage='items' />\n              ) : (\n                <FormattedMessage id='cartItem' defaultMessage='item' />\n              )\n            }\n            price={calculatePrice()}\n            pricePrefix={CURRENCY}\n            onClick={toggleCart}\n          /> */}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CartPopUp;\n"]},"metadata":{},"sourceType":"module"}