{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport ProductCard from 'components/ProductCard/ProductCard';\nimport { ProductsRow, ProductsCol, ButtonWrapper, LoaderWrapper, LoaderItem, ProductCardWrapper } from './Products.style';\nimport { CURRENCY } from 'helper/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport Button from 'components/Button/Button';\nimport Loader from 'components/Loader/Loader';\nimport Placeholder from 'components/Placeholder/Placeholder';\nimport Fade from 'react-reveal/Fade';\nimport NoResultFound from 'components/NoResult/NoResult';\nimport Router from 'next/router';\nimport { GET_PRODUCTS } from 'graphql/query/product.query'; // import { AuthContext } from 'contexts/auth/auth.context';\n// import { getLocalState } from 'helper/localStorage';\n// import fakeDB from '../../helper/fakeDB';\n\nconst QuickView = dynamic(() => import('../QuickView/QuickView'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../QuickView/QuickView')],\n    modules: ['../QuickView/QuickView']\n  }\n});\nexport const Products = props => {\n  const {\n    deviceType,\n    // type,\n    fetchLimit = 8,\n    loadMore = true\n  } = props; // console.log(type, \"Hello\")\n\n  const router = useRouter();\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false); // console.log(router.query)\n\n  let {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: router.query.type,\n      offset: 0,\n      limit: fetchLimit,\n      text: router.query.text,\n      category: router.query.category\n    }\n  }); // console.log(router.query, \"router\")\n  // console.log(data)\n  // Quick View Modal\n\n  const handleModalClose = () => {\n    const as = router.asPath;\n    router.push(as, as, {\n      shallow: true\n    });\n    closeModal();\n  };\n\n  const handleQuickViewModal = (modalProps, deviceType, onModalClose) => {\n    // if (router.pathname === '/product/[slug]') {\n    //   const as = `/product/${modalProps.slug}`;\n    //   router.push(router.pathname, as);\n    //   return;\n    // }\n    openModal({\n      show: true,\n      overlayClassName: 'quick-view-overlay',\n      closeOnClickOutside: !false,\n      component: QuickView,\n      componentProps: {\n        modalProps,\n        deviceType,\n        onModalClose\n      },\n      closeComponent: 'div',\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'quick-view-modal',\n        width: 900,\n        y: 30,\n        height: 'auto',\n        transition: {\n          mass: 1,\n          tension: 0,\n          friction: 0\n        }\n      }\n    }); // const href = router.asPath;\n    // const as = `/product/${modalProps.slug}`;\n    // router.push(href, as, { shallow: true });\n  };\n\n  if (loading) {\n    return __jsx(LoaderWrapper, null, __jsx(LoaderItem, null, __jsx(Placeholder, null)), __jsx(LoaderItem, null, __jsx(Placeholder, null)), __jsx(LoaderItem, null, __jsx(Placeholder, null)));\n  } // const {authDispatch} = useContext<any>(AuthContext)\n\n\n  if (error) {\n    if (error.message === \"Network error: Failed to fetch\") {\n      return __jsx(\"div\", null, \"\\\"Network error!!!\\\"\");\n    }\n\n    if (error.message === \"GraphQL error: Error decoding signature\") {\n      Router.push('/logout');\n    } // console.log(error.message)\n\n\n    return null; // authDispatch({type:'SIGN_OUT'});\n    // return \"Error\"\n    // alert('Error' + error)\n  }\n\n  if (!data || !data.products || data.products.items.length === 0) {\n    return __jsx(NoResultFound, null);\n  }\n\n  const handleLoadMore = () => {\n    toggleLoading(true);\n    fetchMore({\n      variables: {\n        offset: Number(data.products.items.length),\n        limit: fetchLimit\n      },\n      updateQuery: (prev, {\n        fetchMoreResult\n      }) => {\n        toggleLoading(false);\n\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return {\n          products: {\n            __typename: prev.products.__typename,\n            items: [...prev.products.items, ...fetchMoreResult.products.items],\n            hasMore: fetchMoreResult.products.hasMore\n          }\n        };\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ProductsRow, null, data.products.items.map((item, index) => {\n    var _item$images$;\n\n    return __jsx(ProductsCol, {\n      key: index\n    }, (() => {\n      item.discountInPercent = item.discountPercent;\n    })(), __jsx(ProductCardWrapper, null, __jsx(Fade, {\n      duration: 800,\n      delay: index * 10,\n      style: {\n        height: '100%'\n      }\n    }, __jsx(ProductCard, {\n      title: item.title,\n      description: item.description,\n      image: (_item$images$ = item.images[0]) === null || _item$images$ === void 0 ? void 0 : _item$images$.image,\n      weight: item.unit,\n      currency: CURRENCY,\n      price: item.price,\n      salePrice: item.salePrice,\n      discountInPercent: item.discountPercent,\n      data: item,\n      deviceType: deviceType,\n      link: '/product/' + item.slug,\n      onClick: () => handleQuickViewModal(item, deviceType, handleModalClose)\n    }))));\n  })), loadMore && data.hasMore && __jsx(ButtonWrapper, null, __jsx(Button, {\n    onClick: handleLoadMore,\n    title: \"Load More\",\n    intlButtonId: \"loadMoreBtn\",\n    size: \"small\",\n    isLoading: loadingMore,\n    loader: __jsx(Loader, {\n      color: \"#3da2ff\"\n    }),\n    style: {\n      minWidth: 135,\n      backgroundColor: '#ffffff',\n      border: '1px solid #f1f1f1',\n      color: '#3da2ff'\n    }\n  })));\n};\nexport default Products;","map":null,"metadata":{},"sourceType":"module"}