{"ast":null,"code":"var _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/TextField/TextField';\nimport Button from 'components/Button/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { ProfileContext } from 'contexts/profile/profile.context'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Title is required!'),\n    info: Yup.string().required('Address is required')\n  }),\n  handleSubmit: values => {// console.log(values, 'values');\n    // TODO submitting things\n  }\n});\n\nconst UpdateAddress = props => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    // dirty,\n    handleChange,\n    handleBlur // handleReset,\n    // isSubmitting,\n\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n  const {\n    // state, \n    dispatch\n  } = useContext(ProfileContext);\n  const [addressMutation // { data }\n  ] = useMutation(item & item.id ? UPDATE_ADDRESS : ADD_NEW_ADDRESS);\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      await addressMutation({\n        variables: addressValue\n      }); // console.log(addressData, 'address data');\n\n      dispatch({\n        type: 'ADD_OR_UPDATE_ADDRESS',\n        payload: addressValue\n      });\n      closeModal();\n    }\n  };\n\n  return __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, item && item.id ? 'Edit Address' : 'Add New Address'), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Enter Title\",\n    error: touched.name && errors.name,\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"info\",\n    as: \"textarea\",\n    placeholder: \"Enter Address\",\n    error: touched.info && errors.info,\n    value: values.info,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    title: \"Save Address\",\n    size: \"medium\",\n    fullwidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FormEnhancer(UpdateAddress);","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx"],"names":["React","useContext","Yup","withFormik","Form","closeModal","TextField","Button","useMutation","UPDATE_ADDRESS","ADD_NEW_ADDRESS","FieldWrapper","Heading","ProfileContext","FormEnhancer","mapPropsToValues","props","id","item","name","info","validationSchema","object","shape","string","required","handleSubmit","values","UpdateAddress","isValid","touched","errors","handleChange","handleBlur","addressValue","type","dispatch","addressMutation","variables","payload"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/TextField/TextField';\nimport Button from 'components/Button/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\n\n// Shape of form values\ninterface FormValues {\n  id?: number | null;\n  name?: string;\n  info?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n}\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || '',\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Title is required!'),\n    info: Yup.string().required('Address is required'),\n  }),\n  handleSubmit: values => {\n    // console.log(values, 'values');\n    // TODO submitting things\n  },\n});\n\nconst UpdateAddress = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    // dirty,\n    handleChange,\n    handleBlur,\n\n    // handleReset,\n    // isSubmitting,\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info,\n  };\n  const { \n    // state, \n    dispatch \n  } = useContext(ProfileContext);\n\n  const [\n    addressMutation, \n    // { data }\n  ] = useMutation((item & item.id) ?  UPDATE_ADDRESS : ADD_NEW_ADDRESS);\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      await addressMutation({\n        variables: addressValue,\n      });\n      // console.log(addressData, 'address data');\n      dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\n      closeModal();\n    }\n  };\n  return (\n    <Form>\n      <Heading>{item && item.id ? 'Edit Address' : 'Add New Address'}</Heading>\n      <FieldWrapper>\n        <TextField\n          id='name'\n          type='text'\n          placeholder='Enter Title'\n          error={touched.name && errors.name}\n          value={values.name}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n\n      <FieldWrapper>\n        <TextField\n          id='info'\n          as='textarea'\n          placeholder='Enter Address'\n          error={touched.info && errors.info}\n          value={values.info}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n\n      <Button\n        onClick={handleSubmit}\n        type='submit'\n        title='Save Address'\n        size='medium'\n        fullwidth={true}\n      />\n    </Form>\n  );\n};\n\nexport default FormEnhancer(UpdateAddress);\n"]},"metadata":{},"sourceType":"module"}