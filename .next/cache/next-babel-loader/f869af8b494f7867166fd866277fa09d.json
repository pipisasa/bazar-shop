{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Col } from 'react-styled-flexboxgrid';\nimport { openModal } from '@redq/reuse-modal';\nimport RadioCard from 'components/RadioCard/RadioCard';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { DELETE_ADDRESS } from 'graphql/mutation/address';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_CONTACT } from 'graphql/mutation/contact';\nimport StripePaymentForm from '../../Payment/StripePaymentForm';\nimport { SettingsForm, SettingsFormContent, HeadingSection, Title, Input, Row, ButtonGroup } from './Settings.style';\nimport RadioGroup from 'components/RadioGroup/RadioGroup';\nimport PaymentGroup from 'components/PaymentGroup/PaymentGroup';\nimport UpdateAddress from '../../Checkout/Update/UpdateAddress';\nimport UpdateContact from '../../Checkout/Update/UpdateContact';\nimport Button from 'components/Button/Button';\nimport { UPDATE_ME } from 'graphql/mutation/me';\nimport { FormattedMessage } from 'react-intl';\n\nvar SettingsContent = function SettingsContent(_ref) {\n  var deviceType = _ref.deviceType;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useMutation = useMutation(UPDATE_ME),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateMeMutation = _useMutation2[0];\n\n  var _useMutation3 = useMutation(DELETE_CONTACT),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      deleteContactMutation = _useMutation4[0];\n\n  var _useMutation5 = useMutation(DELETE_ADDRESS),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      deleteAddressMutation = _useMutation6[0];\n\n  var _useMutation7 = useMutation(DELETE_CARD),\n      _useMutation8 = _slicedToArray(_useMutation7, 1),\n      deletePaymentCardMutation = _useMutation8[0];\n\n  var address = state.address,\n      contacts = state.contacts,\n      cards = state.cards;\n  useEffect(function () {\n    var firstName = state.firstName,\n        lastName = state.lastName,\n        email = state.email;\n    localStorage.setItem(\"profileInfo\", JSON.stringify({\n      firstName: firstName,\n      lastName: lastName,\n      email: email\n    }));\n    return function () {};\n  }, []);\n\n  var handleChange = function handleChange(value, field) {\n    dispatch({\n      type: 'HANDLE_ON_INPUT_CHANGE',\n      payload: {\n        value: value,\n        field: field\n      }\n    });\n  }; // Add or edit modal\n\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-address-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  var handleEditDelete = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item, type, name) {\n      var modalComponent;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(type === 'edit')) {\n                _context.next = 5;\n                break;\n              }\n\n              modalComponent = name === 'address' ? UpdateAddress : UpdateContact;\n              handleModal(modalComponent, item);\n              _context.next = 21;\n              break;\n\n            case 5:\n              _context.t0 = name;\n              _context.next = _context.t0 === 'payment' ? 8 : _context.t0 === 'contact' ? 12 : _context.t0 === 'address' ? 16 : 20;\n              break;\n\n            case 8:\n              dispatch({\n                type: 'DELETE_CARD',\n                payload: item.id\n              });\n              _context.next = 11;\n              return deletePaymentCardMutation({\n                variables: {\n                  slug: item.slug\n                }\n              });\n\n            case 11:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 12:\n              dispatch({\n                type: 'DELETE_CONTACT',\n                payload: item.id\n              });\n              _context.next = 15;\n              return deleteContactMutation({\n                variables: {\n                  slug: item.slug\n                }\n              });\n\n            case 15:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 16:\n              dispatch({\n                type: 'DELETE_ADDRESS',\n                payload: item.id\n              });\n              _context.next = 19;\n              return deleteAddressMutation({\n                variables: {\n                  slug: item.slug\n                }\n              });\n\n            case 19:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 20:\n              return _context.abrupt(\"return\", false);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleEditDelete(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSave = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var firstName, lastName, email, prevProfile, variables;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              firstName = state.firstName, lastName = state.lastName, email = state.email;\n              prevProfile = JSON.parse(localStorage.getItem(\"profileInfo\"));\n              variables = Object.fromEntries(Object.entries({\n                firstName: firstName,\n                lastName: lastName,\n                email: email\n              }).filter(function (_ref4) {\n                var _ref5 = _slicedToArray(_ref4, 2),\n                    key = _ref5[0],\n                    val = _ref5[1];\n\n                return val !== prevProfile[key];\n              })); // console.log(variables)\n\n              _context2.next = 5;\n              return updateMeMutation({\n                variables: variables\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSave() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(SettingsForm, null, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"profilePageTitle\",\n    defaultMessage: \"Your Profile\"\n  }))), __jsx(Row, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Input, {\n    type: \"text\",\n    label: \"First Name\",\n    value: state.firstName,\n    onUpdate: function onUpdate(value) {\n      return handleChange(value, 'firstName');\n    },\n    style: {\n      backgroundColor: '#F7F7F7'\n    },\n    intlInputLabelId: \"profileFirstNameField\"\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Input, {\n    type: \"text\",\n    label: \"Last Name\",\n    value: state.lastName,\n    onUpdate: function onUpdate(value) {\n      return handleChange(value, 'lastName');\n    },\n    style: {\n      backgroundColor: '#F7F7F7'\n    },\n    intlInputLabelId: \"profileLastNameField\"\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6,\n    style: {\n      marginTop: '30px'\n    }\n  }, __jsx(Input, {\n    type: \"email\",\n    label: \"Email Address\",\n    value: state.email,\n    onUpdate: function onUpdate(value) {\n      return handleChange(value, 'email');\n    },\n    style: {\n      backgroundColor: '#F7F7F7'\n    },\n    intlInputLabelId: \"profileEmailField\"\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Button, {\n    title: \"Save\",\n    onClick: handleSave,\n    style: {\n      width: '100%'\n    },\n    intlButtonId: \"profileSaveBtn\"\n  }))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"contactNumberTItle\",\n    defaultMessage: \"Contact Numbers\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroup, {\n    items: contacts,\n    component: function component(item) {\n      return __jsx(RadioCard, {\n        id: item.id,\n        key: item.id,\n        title: item.Type,\n        content: item.number,\n        checked: item.Type === 'primary',\n        onChange: function onChange() {\n          return dispatch({\n            type: 'SET_PRIMARY_CONTACT',\n            payload: item.id.toString()\n          });\n        },\n        name: \"contact\",\n        onEdit: function onEdit() {\n          return handleEditDelete(item, 'edit', 'contact');\n        },\n        onDelete: function onDelete() {\n          return handleEditDelete(item, 'delete', 'contact');\n        }\n      });\n    },\n    secondaryComponent: __jsx(Button, {\n      title: \"Add Contact\",\n      iconPosition: \"right\",\n      colors: \"primary\",\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      intlButtonId: \"addContactBtn\",\n      onClick: function onClick() {\n        return handleModal(UpdateContact, {}, 'add-contact-modal');\n      }\n    })\n  }))))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12,\n    style: {\n      position: 'relative'\n    }\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"deliveryAddresTitle\",\n    defaultMessage: \"Delivery Address\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroup, {\n    items: address,\n    component: function component(item) {\n      return __jsx(RadioCard, {\n        id: item.id,\n        key: item.id,\n        title: item.name,\n        content: item.info,\n        name: \"address\",\n        checked: item.Type === 'primary',\n        onChange: function onChange() {\n          return dispatch({\n            type: 'SET_PRIMARY_ADDRESS',\n            payload: item.id.toString()\n          });\n        },\n        onEdit: function onEdit() {\n          return handleEditDelete(item, 'edit', 'address');\n        },\n        onDelete: function onDelete() {\n          return handleEditDelete(item, 'delete', 'address');\n        }\n      });\n    },\n    secondaryComponent: __jsx(Button, {\n      title: \"Add Adderss\",\n      iconPosition: \"right\",\n      colors: \"primary\",\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      intlButtonId: \"addAddressBtn\",\n      onClick: function onClick() {\n        return handleModal(UpdateAddress, {}, 'add-address-modal');\n      }\n    })\n  }))))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"paymentCardTitle\",\n    defaultMessage: \"Payments Card\"\n  }))), __jsx(PaymentGroup, {\n    name: \"payment\",\n    deviceType: deviceType,\n    items: cards,\n    onEditDeleteField: function onEditDeleteField(item, Type) {\n      return handleEditDelete(item, Type, 'payment');\n    },\n    onChange: function onChange(item) {\n      return dispatch({\n        type: 'SET_PRIMARY_CARD',\n        payload: item.id.toString()\n      });\n    },\n    handleAddNewCard: function handleAddNewCard() {\n      handleModal(StripePaymentForm, {\n        buttonText: 'Add Card'\n      }, 'add-address-modal stripe-modal');\n    }\n  }))))));\n};\n\nexport default SettingsContent;","map":null,"metadata":{},"sourceType":"module"}