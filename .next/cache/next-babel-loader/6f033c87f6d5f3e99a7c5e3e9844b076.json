{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/dastan/bazar-shop/containers/Payment/StripePaymentForm.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { CardElement, injectStripe, Elements, StripeProvider } from 'react-stripe-elements';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './StripePaymentForm.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nvar StripeForm = injectStripe(_c = _s(function (_ref) {\n  _s();\n\n  var getToken = _ref.getToken,\n      buttonText = _ref.buttonText,\n      stripe = _ref.stripe;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$stripe$createT, token;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return stripe.createToken({\n                name: 'Name'\n              });\n\n            case 2:\n              _yield$stripe$createT = _context.sent;\n              token = _yield$stripe$createT.token;\n              getToken(token);\n\n              if (token) {\n                dispatch({\n                  type: 'ADD_CARD',\n                  payload: token.card\n                });\n                closeModal();\n              }\n\n              console.log(token, 'token');\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(StripeFormWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Enter card info\"), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  })), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, buttonText ? buttonText : 'Pay Now'));\n}, \"QMdo+h1+fLbTriZQ0QN6uukzyow=\"));\n_c2 = StripeForm;\n\nvar StripePaymentForm = function StripePaymentForm(_ref3) {\n  _s2();\n\n  var _ref3$item = _ref3.item,\n      price = _ref3$item.price,\n      buttonText = _ref3$item.buttonText;\n\n  var _useMutation = useMutation(GET_PAYMENT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      getPayment = _useMutation2[0];\n\n  var sendTokenToServer = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token) {\n      var payment_info;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getPayment({\n                variables: {\n                  paymentInput: JSON.stringify({\n                    token: token,\n                    amount: price\n                  })\n                }\n              });\n\n            case 2:\n              payment_info = _context2.sent;\n              console.log(payment_info, 'payment_info');\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function sendTokenToServer(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return true && __jsx(StripeProvider, {\n    apiKey: process.env.STRIPE_PUBLIC_KEY,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(Elements, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(StripeForm, {\n    getToken: function getToken(token) {\n      return sendTokenToServer(token);\n    },\n    buttonText: buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }))));\n};\n\n_s2(StripePaymentForm, \"DXuXA7WQGwsLS5kVUt6Iwr7AMCo=\", false, function () {\n  return [useMutation];\n});\n\n_c3 = StripePaymentForm;\nexport default StripePaymentForm;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StripeForm$injectStripe\");\n$RefreshReg$(_c2, \"StripeForm\");\n$RefreshReg$(_c3, \"StripePaymentForm\");","map":{"version":3,"sources":["/home/dastan/bazar-shop/containers/Payment/StripePaymentForm.tsx"],"names":["React","useContext","CardElement","injectStripe","Elements","StripeProvider","useMutation","closeModal","GET_PAYMENT","StripeFormWrapper","Heading","FieldWrapper","ProfileContext","StripeForm","getToken","buttonText","stripe","state","dispatch","handleSubmit","createToken","name","token","type","payload","card","console","log","StripePaymentForm","item","price","getPayment","sendTokenToServer","variables","paymentInput","JSON","stringify","amount","payment_info","process","env","STRIPE_PUBLIC_KEY"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport {\n  CardElement,\n  injectStripe,\n  Elements,\n  StripeProvider,\n  ReactStripeElements,\n} from 'react-stripe-elements';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, {\n  Heading,\n  FieldWrapper,\n} from './StripePaymentForm.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\ntype StripeFormProps = ReactStripeElements.InjectedStripeProps & {\n  getToken: any;\n  buttonText: string;\n};\nconst StripeForm = injectStripe(\n  ({ getToken, buttonText, stripe }: StripeFormProps) => {\n    const { state, dispatch } = useContext(ProfileContext);\n    const handleSubmit = async () => {\n      let { token } = await stripe.createToken({ name: 'Name' });\n      getToken(token);\n      if (token) {\n        dispatch({ type: 'ADD_CARD', payload: token.card });\n        closeModal();\n      }\n      console.log(token, 'token');\n    };\n    return (\n      <StripeFormWrapper>\n        <Heading>Enter card info</Heading>\n        <FieldWrapper>\n          <CardElement />\n        </FieldWrapper>\n        <button type=\"button\" onClick={handleSubmit}>\n          {buttonText ? buttonText : 'Pay Now'}\n        </button>\n      </StripeFormWrapper>\n    );\n  }\n);\ntype Item = {\n  item: {\n    price: any;\n    buttonText: string;\n  };\n};\nconst StripePaymentForm = ({ item: { price, buttonText } }: Item) => {\n  const [getPayment] = useMutation(GET_PAYMENT);\n  const sendTokenToServer = async (token: any) => {\n    const payment_info = await getPayment({\n      variables: { paymentInput: JSON.stringify({ token, amount: price }) },\n    });\n    console.log(payment_info, 'payment_info');\n  };\n\n  return (\n    process.browser && (\n      <StripeProvider apiKey={process.env.STRIPE_PUBLIC_KEY}>\n        <div className=\"example\">\n          <Elements>\n            <StripeForm\n              getToken={token => sendTokenToServer(token)}\n              buttonText={buttonText}\n            />\n          </Elements>\n        </div>\n      </StripeProvider>\n    )\n  );\n};\n\nexport default StripePaymentForm;\n"]},"metadata":{},"sourceType":"module"}