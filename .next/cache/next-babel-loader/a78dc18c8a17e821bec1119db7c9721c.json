{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\nimport * as Yup from 'yup';\nimport { closeModal } from '@redq/reuse-modal';\nimport { ErrorMessage, Formik, Form } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport MaskedInput from 'react-text-mask';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport Button from 'components/Button/Button';\nimport { UPDATE_CONTACT, CREATE_CONTACT } from 'graphql/mutation/contact';\nimport { FieldWrapper, Heading } from './Update.style';\nconst ContactValidationSchema = Yup.object().shape({\n  number: Yup.string().required('Number is required')\n});\n\nconst CreateOrUpdateContact = ({\n  item\n}) => {\n  const initialValues = {\n    id: item.id || null,\n    slug: item.slug || null,\n    type: item.type || 'secondary',\n    number: item.number || ''\n  };\n  const [addContactMutation] = useMutation(item && item.slug ? UPDATE_CONTACT : CREATE_CONTACT);\n  const {\n    // state, \n    dispatch\n  } = useContext(ProfileContext);\n\n  const handleSubmit = async (values, {\n    setSubmitting\n  }) => {\n    // console.log(values)\n    const {\n      data\n    } = await addContactMutation({\n      variables: {\n        slug: values.slug,\n        number: values.number,\n        type: values.type\n      }\n    }); // console.log(values, 'formik values');\n\n    dispatch({\n      type: 'ADD_OR_UPDATE_CONTACT',\n      payload: data\n    });\n    closeModal();\n    setSubmitting(false);\n  };\n\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: ContactValidationSchema\n  }, ({\n    values,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => __jsx(Form, null, __jsx(Heading, null, item && item.id ? 'Edit Contact' : 'Add New Contact'), __jsx(FieldWrapper, null, __jsx(MaskedInput, {\n    mask: [// '(',\n    /[1-9]/, /\\d/, /\\d/, // ')',\n    // ' ',\n    /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d?/, /\\d?/, /\\d?/, /\\d?/, /\\d?/, /\\d?/],\n    className: \"form-control\",\n    placeholder: \"Enter a phone number\",\n    guide: false,\n    id: \"my-input-id\",\n    value: values.number,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: \"number\",\n    render: (ref, props) => __jsx(StyledInput, _extends({\n      ref: ref\n    }, props))\n  })), __jsx(ErrorMessage, {\n    name: \"number\",\n    component: StyledError\n  }), __jsx(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    title: \"Save Contact\",\n    size: \"medium\",\n    fullwidth: true\n  })));\n};\n\nexport default CreateOrUpdateContact;\nconst StyledInput = styled.input.withConfig({\n  displayName: \"UpdateContact__StyledInput\",\n  componentId: \"sc-1nqsrie-0\"\n})([\"width:100%;height:54px;border-radius:6px;font-family:\", \";border:1px solid \", \";color:\", \";font-size:16px;line-height:19px;font-weight:400;padding:0 18px;box-sizing:border-box;transition:border-color 0.25s ease;&:hover,&:focus{outline:0;}&:focus{border-color:\", \";}&::placeholder{color:\", \";}\"], themeGet('colors.fontFamily', 'Lato, sans-serif'), themeGet('colors.borderColor', '#e6e6e6'), themeGet('colors.darkBold', '#0D1136'), themeGet('colors.primary', '#3da2ff'), themeGet('colorsdarkRegular', '#77798C'));\nconst StyledError = styled.div.withConfig({\n  displayName: \"UpdateContact__StyledError\",\n  componentId: \"sc-1nqsrie-1\"\n})([\"color:red;padding-bottom:10px;margin-top:-5px;\"]);","map":null,"metadata":{},"sourceType":"module"}