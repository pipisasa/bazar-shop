{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/containers/Cart/CartPopUp.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  .cartPopup{\\n    top: auto !important;\\n    left: auto !important;\\n    bottom: 50px !important;\\n    right: 50px !important;\\n    box-shadow: 0 21px 36px rgba(0, 0, 0, 0.16);\\n    transform-origin: bottom right;\\n\\n    @media (max-width: 767px) {\\n      max-width: none!important;\\n      width: 100% !important;\\n      bottom: 0 !important;\\n      left: 0!important;\\n      background: #fff;\\n      overflow: initial !important;\\n      transform-origin: bottom center;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport CartItem from './Cart';\nimport { useCart } from 'contexts/cart/use-cart';\nvar CartPopupStyle = createGlobalStyle(_templateObject());\n_c = CartPopupStyle;\n\nvar CartPopUp = function CartPopUp(_ref) {\n  _s();\n\n  var _ref$deviceType = _ref.deviceType,\n      mobile = _ref$deviceType.mobile,\n      tablet = _ref$deviceType.tablet,\n      desktop = _ref$deviceType.desktop;\n\n  var _useCart = useCart(),\n      isOpen = _useCart.isOpen,\n      cartItemsCount = _useCart.cartItemsCount,\n      toggleCart = _useCart.toggleCart,\n      calculatePrice = _useCart.calculatePrice;\n\n  var handleModal = function handleModal() {\n    openModal({\n      show: true,\n      config: {\n        className: 'cartPopup',\n        width: 'auto',\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        transition: {\n          tension: 360,\n          friction: 40\n        }\n      },\n      closeOnClickOutside: true,\n      component: CartItem,\n      closeComponent: function closeComponent() {\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }\n        });\n      },\n      componentProps: {\n        onCloseBtnClick: closeModal,\n        scrollbarHeight: 370\n      }\n    });\n  };\n\n  var cartSliderClass = isOpen === true ? 'cartPopupFixed' : '';\n  return __jsx(React.Fragment, null, mobile || tablet ? __jsx(React.Fragment, null, __jsx(CartPopupStyle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })) : __jsx(React.Fragment, null, __jsx(CartItem, {\n    onCloseBtnClick: toggleCart,\n    scrollbarHeight: \"100vh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  })));\n};\n\n_s(CartPopUp, \"9OfCyKMkiX8EZB7rii64tphcWd8=\", false, function () {\n  return [useCart];\n});\n\n_c2 = CartPopUp;\nexport default CartPopUp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CartPopupStyle\");\n$RefreshReg$(_c2, \"CartPopUp\");","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/containers/Cart/CartPopUp.tsx"],"names":["React","createGlobalStyle","openModal","closeModal","CartItem","useCart","CartPopupStyle","CartPopUp","deviceType","mobile","tablet","desktop","isOpen","cartItemsCount","toggleCart","calculatePrice","handleModal","show","config","className","width","height","enableResizing","disableDragging","transition","tension","friction","closeOnClickOutside","component","closeComponent","componentProps","onCloseBtnClick","scrollbarHeight","cartSliderClass"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,mBAAtC;AACA,OAAOC,QAAP,MAAqB,QAArB;AAOA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,IAAMC,cAAc,GAAGL,iBAAH,mBAApB;KAAMK,c;;AA6BN,IAAMC,SAA8B,GAAG,SAAjCA,SAAiC,OAEjC;AAAA;;AAAA,6BADJC,UACI;AAAA,MADUC,MACV,mBADUA,MACV;AAAA,MADkBC,MAClB,mBADkBA,MAClB;AAAA,MAD0BC,OAC1B,mBAD0BA,OAC1B;;AAAA,iBAC2DN,OAAO,EADlE;AAAA,MACIO,MADJ,YACIA,MADJ;AAAA,MACYC,cADZ,YACYA,cADZ;AAAA,MAC4BC,UAD5B,YAC4BA,UAD5B;AAAA,MACwCC,cADxC,YACwCA,cADxC;;AAGJ,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBd,IAAAA,SAAS,CAAC;AACRe,MAAAA,IAAI,EAAE,IADE;AAERC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE,WADL;AAENC,QAAAA,KAAK,EAAE,MAFD;AAGNC,QAAAA,MAAM,EAAE,MAHF;AAINC,QAAAA,cAAc,EAAE,KAJV;AAKNC,QAAAA,eAAe,EAAE,IALX;AAMNC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE,GADC;AAEVC,UAAAA,QAAQ,EAAE;AAFA;AANN,OAFA;AAaRC,MAAAA,mBAAmB,EAAE,IAbb;AAcRC,MAAAA,SAAS,EAAExB,QAdH;AAeRyB,MAAAA,cAAc,EAAE;AAAA,eAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAAA,OAfR;AAgBRC,MAAAA,cAAc,EAAE;AAAEC,QAAAA,eAAe,EAAE5B,UAAnB;AAA+B6B,QAAAA,eAAe,EAAE;AAAhD;AAhBR,KAAD,CAAT;AAkBD,GAnBD;;AAqBA,MAAIC,eAAe,GAAGrB,MAAM,KAAK,IAAX,GAAkB,gBAAlB,GAAqC,EAA3D;AAEA,SACE,4BACGH,MAAM,IAAIC,MAAV,GACC,4BACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,GAmBC,4BAIQ,MAAC,QAAD;AAAU,IAAA,eAAe,EAAEI,UAA3B;AAAuC,IAAA,eAAe,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,CApBJ,CADF;AAgDD,CA5ED;;GAAMP,S;UAG2DF,O;;;MAH3DE,S;AA8EN,eAAeA,SAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport CartItem from './Cart';\nimport CartPopupButton, {\n  BoxedCartButton,\n} from 'components/CartPopup/CartPopupButton';\nimport { CURRENCY } from 'helper/constant';\nimport { CartSlidePopup, CartPopupBack } from './CartItemCard.style';\nimport { FormattedMessage } from 'react-intl';\nimport { useCart } from 'contexts/cart/use-cart';\n\nconst CartPopupStyle = createGlobalStyle`\n  .cartPopup{\n    top: auto !important;\n    left: auto !important;\n    bottom: 50px !important;\n    right: 50px !important;\n    box-shadow: 0 21px 36px rgba(0, 0, 0, 0.16);\n    transform-origin: bottom right;\n\n    @media (max-width: 767px) {\n      max-width: none!important;\n      width: 100% !important;\n      bottom: 0 !important;\n      left: 0!important;\n      background: #fff;\n      overflow: initial !important;\n      transform-origin: bottom center;\n    }\n  }\n`;\n\ntype CartProps = {\n  deviceType: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst CartPopUp: React.FC<CartProps> = ({\n  deviceType: { mobile, tablet, desktop },\n}) => {\n  const { isOpen, cartItemsCount, toggleCart, calculatePrice } = useCart();\n\n  const handleModal = () => {\n    openModal({\n      show: true,\n      config: {\n        className: 'cartPopup',\n        width: 'auto',\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        transition: {\n          tension: 360,\n          friction: 40,\n        },\n      },\n      closeOnClickOutside: true,\n      component: CartItem,\n      closeComponent: () => <div />,\n      componentProps: { onCloseBtnClick: closeModal, scrollbarHeight: 370 },\n    });\n  };\n\n  let cartSliderClass = isOpen === true ? 'cartPopupFixed' : '';\n\n  return (\n    <>\n      {mobile || tablet ? (\n        <>\n          <CartPopupStyle />\n          {/* <CartPopupButton\n            className='product-cart'\n            itemCount={cartItemsCount}\n            itemPostfix={\n              cartItemsCount > 1 ? (\n                <FormattedMessage id='cartItems' defaultMessage='items' />\n              ) : (\n                <FormattedMessage id='cartItem' defaultMessage='item' />\n              )\n            }\n            price={calculatePrice()}\n            pricePrefix='$'\n            onClick={handleModal}\n          /> */}\n        </>\n      ) : (\n        <>\n          {/* <CartPopupBack onClick={(e)=>{if(e.target === e.currentTarget){toggleCart()}}} isOpen={isOpen}>\n            <CartSlidePopup className={cartSliderClass}> */}\n              {/* {isOpen && ( */}\n                <CartItem onCloseBtnClick={toggleCart} scrollbarHeight='100vh' />\n              {/* )} */}\n            {/* </CartSlidePopup>\n          </CartPopupBack> */}\n\n          {/* <BoxedCartButton\n            className='product-cart'\n            itemCount={cartItemsCount}\n            itemPostfix={\n              cartItemsCount > 1 ? (\n                <FormattedMessage id='cartItems' defaultMessage='items' />\n              ) : (\n                <FormattedMessage id='cartItem' defaultMessage='item' />\n              )\n            }\n            price={calculatePrice()}\n            pricePrefix={CURRENCY}\n            onClick={toggleCart}\n          /> */}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CartPopUp;\n"]},"metadata":{},"sourceType":"module"}