{"ast":null,"code":"var _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/containers/Sidebar/Sidebar.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import React, { useContext } from 'react';\n// import { useRouter } from 'next/router';\n// import Link from 'next/link';\n// import { useQuery } from '@apollo/react-hooks';\n// import Sticky from 'react-stickynode';\n// import { Scrollbars } from 'react-custom-scrollbars';\n// import Popover from 'components/Popover/Popover';\n// import { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\n// import { SearchContext } from 'contexts/search/search.context';\n// import { useLocale } from 'contexts/language/language.provider';\n// import { useStickyState } from 'contexts/app/app.provider';\n// import {\n//   SidebarMobileLoader,\n//   SidebarLoader,\n// } from 'components/Placeholder/Placeholder';\n// import { FormattedMessage } from 'react-intl';\n// import {\n//   CategoryWrapper,\n//   TreeWrapper,\n//   PopoverHandler,\n//   PopoverWrapper,\n//   SidebarWrapper,\n//   RequestMedicine,\n//   Loading,\n// } from './Sidebar.style';\n// import { TreeMenu } from 'components/TreeMenu/TreeMenu';\n// import { GET_CATEGORIES } from 'graphql/query/category.query';\n// type SidebarCategoryProps = {\n//   deviceType: {\n//     mobile: string;\n//     tablet: string;\n//     desktop: boolean;\n//   };\n//   type: string;\n// };\n// const SidebarCategory: React.FC<SidebarCategoryProps> = ({\n//   deviceType: { mobile, tablet, desktop },\n//   type,\n// }) => {\n//   const { state, dispatch } = useContext(SearchContext);\n//   const router = useRouter();\n//   const { pathname, query } = router;\n//   const { data, loading } = useQuery(GET_CATEGORIES);\n//   const selectedQueries = query.category;\n//   const { isRtl } = useLocale();\n//   const handleCategorySelection = (slug: string) => {\n//     const updatedQuery:any = {};\n//     if(state.text) updatedQuery.text = state.text;\n//     if(slug || typeof slug === 'string') updatedQuery.category = slug\n//     router.push({\n//       pathname: pathname,\n//       query: updatedQuery,\n//     });\n//   };\n//   const isSidebarSticky = useStickyState('isSidebarSticky');\n//   if (!data || loading) {\n//     if (mobile || tablet) {\n//       return <SidebarMobileLoader />;\n//     }\n//     return <SidebarLoader />;\n//   }\n//   return (\n//     <CategoryWrapper>\n//       <PopoverWrapper>\n//         <Popover\n//           handler={\n//             <PopoverHandler>\n//               <div>\n//                 <CategoryIcon />\n//                 Select your Category\n//               </div>\n//               <div>\n//                 <ArrowDropDown />\n//               </div>\n//             </PopoverHandler>\n//           }\n//           className='category-popover'\n//           content={\n//             <TreeMenu\n//               data={data.allCategories}\n//               onClick={handleCategorySelection}\n//               active={selectedQueries}\n//             />\n//           }\n//         />\n//       </PopoverWrapper>\n//       <SidebarWrapper style={{ paddingTop: type === 'medicine' ? 0 : 45 }}>\n//         <Sticky enabled={isSidebarSticky} top={type === 'medicine' ? 89 : 110}>\n//           <Scrollbars\n//             universal\n//             autoHide\n//             autoHeight\n//             autoHeightMax={688}\n//             renderView={(props) => (\n//               <div\n//                 {...props}\n//                 style={{\n//                   ...props.style,\n//                   marginLeft: isRtl ? props.style.marginRight : 0,\n//                   marginRight: isRtl ? 0 : props.style.marginRight,\n//                 }}\n//               />\n//             )}\n//           >\n//             <TreeWrapper>\n//               <TreeMenu\n//                 data={data.allCategories}\n//                 onClick={handleCategorySelection}\n//                 active={selectedQueries}\n//               />\n//             </TreeWrapper>\n//           </Scrollbars>\n//         </Sticky>\n//       </SidebarWrapper>\n//     </CategoryWrapper>\n//   );\n// };\n// export default SidebarCategory;\nimport React, { useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport Sticky from 'react-stickynode';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Popover from 'components/Popover/Popover';\nimport { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\nimport { SearchContext } from 'contexts/search/search.context';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useStickyState } from 'contexts/app/app.provider';\nimport { SidebarMobileLoader, SidebarLoader } from 'components/Placeholder/Placeholder';\nimport { CategoryWrapper, TreeWrapper, PopoverHandler, PopoverWrapper, SidebarWrapper // Loading,\n} from './Sidebar.style';\nimport { TreeMenu } from 'components/TreeMenu/TreeMenu';\nimport { GET_CATEGORIES } from 'graphql/query/category.query';\n\nconst SidebarCategory = ({\n  deviceType: {\n    mobile,\n    tablet\n  },\n  type\n}) => {\n  const {\n    state // dispatch \n\n  } = useContext(SearchContext);\n  const router = useRouter();\n  const {\n    pathname,\n    query\n  } = router;\n  const {\n    data,\n    loading\n  } = useQuery(GET_CATEGORIES, {// variables: { type },\n  });\n  const selectedQueries = query.category;\n  const {\n    isRtl\n  } = useLocale();\n\n  const handleCategorySelection = slug => {\n    const updatedQuery = {\n      category: slug\n    };\n    if (state.text) updatedQuery.text = state.text;\n    if (state.type) updatedQuery.type = state.type;\n    router.push({\n      pathname: pathname,\n      query: updatedQuery\n    });\n  };\n\n  const isSidebarSticky = useStickyState('isSidebarSticky');\n\n  if (!data || loading) {\n    if (mobile || tablet) {\n      return __jsx(SidebarMobileLoader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return __jsx(SidebarLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(CategoryWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 5\n    }\n  }, __jsx(PopoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, __jsx(Popover, {\n    handler: __jsx(PopoverHandler, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, __jsx(CategoryIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }), \"Select your Category\"), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 15\n      }\n    }, __jsx(ArrowDropDown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }))),\n    className: \"category-popover\",\n    content: __jsx(TreeMenu, {\n      data: data.allCategories,\n      onClick: handleCategorySelection,\n      active: selectedQueries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  })), __jsx(SidebarWrapper, {\n    style: {\n      paddingTop: type === 'medicine' ? 0 : 45\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }\n  }, __jsx(Sticky, {\n    enabled: isSidebarSticky,\n    top: type === 'medicine' ? 89 : 110,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: 688,\n    renderView: props => __jsx(\"div\", _extends({}, props, {\n      style: _objectSpread(_objectSpread({}, props.style), {}, {\n        marginLeft: isRtl ? props.style.marginRight : 0,\n        marginRight: isRtl ? 0 : props.style.marginRight\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }, __jsx(TreeWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, __jsx(TreeMenu, {\n    data: data.allCategories,\n    onClick: handleCategorySelection,\n    active: selectedQueries,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default SidebarCategory;","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/containers/Sidebar/Sidebar.tsx"],"names":["React","useContext","useRouter","useQuery","Sticky","Scrollbars","Popover","ArrowDropDown","CategoryIcon","SearchContext","useLocale","useStickyState","SidebarMobileLoader","SidebarLoader","CategoryWrapper","TreeWrapper","PopoverHandler","PopoverWrapper","SidebarWrapper","TreeMenu","GET_CATEGORIES","SidebarCategory","deviceType","mobile","tablet","type","state","router","pathname","query","data","loading","selectedQueries","category","isRtl","handleCategorySelection","slug","updatedQuery","text","push","isSidebarSticky","allCategories","paddingTop","props","style","marginLeft","marginRight"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,uBAA5C;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SACEC,mBADF,EAEEC,aAFF,QAGO,oCAHP;AAKA,SACEC,eADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,cALF,CAOE;AAPF,OAQO,iBARP;AAUA,SAASC,QAAT,QAAyB,8BAAzB;AAEA,SAASC,cAAT,QAA+B,8BAA/B;;AAWA,MAAMC,eAA+C,GAAG,CAAC;AACvDC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAD2C;AAEvDC,EAAAA;AAF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","sourcesContent":["// import React, { useContext } from 'react';\n// import { useRouter } from 'next/router';\n// import Link from 'next/link';\n// import { useQuery } from '@apollo/react-hooks';\n// import Sticky from 'react-stickynode';\n// import { Scrollbars } from 'react-custom-scrollbars';\n// import Popover from 'components/Popover/Popover';\n// import { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\n// import { SearchContext } from 'contexts/search/search.context';\n// import { useLocale } from 'contexts/language/language.provider';\n// import { useStickyState } from 'contexts/app/app.provider';\n// import {\n//   SidebarMobileLoader,\n//   SidebarLoader,\n// } from 'components/Placeholder/Placeholder';\n// import { FormattedMessage } from 'react-intl';\n// import {\n//   CategoryWrapper,\n//   TreeWrapper,\n//   PopoverHandler,\n//   PopoverWrapper,\n//   SidebarWrapper,\n//   RequestMedicine,\n//   Loading,\n// } from './Sidebar.style';\n\n// import { TreeMenu } from 'components/TreeMenu/TreeMenu';\n\n// import { GET_CATEGORIES } from 'graphql/query/category.query';\n\n// type SidebarCategoryProps = {\n//   deviceType: {\n//     mobile: string;\n//     tablet: string;\n//     desktop: boolean;\n//   };\n//   type: string;\n// };\n\n// const SidebarCategory: React.FC<SidebarCategoryProps> = ({\n//   deviceType: { mobile, tablet, desktop },\n//   type,\n// }) => {\n//   const { state, dispatch } = useContext(SearchContext);\n//   const router = useRouter();\n//   const { pathname, query } = router;\n//   const { data, loading } = useQuery(GET_CATEGORIES);\n//   const selectedQueries = query.category;\n\n//   const { isRtl } = useLocale();\n\n//   const handleCategorySelection = (slug: string) => {\n//     const updatedQuery:any = {};\n//     if(state.text) updatedQuery.text = state.text;\n//     if(slug || typeof slug === 'string') updatedQuery.category = slug\n//     router.push({\n//       pathname: pathname,\n//       query: updatedQuery,\n//     });\n//   };\n//   const isSidebarSticky = useStickyState('isSidebarSticky');\n\n//   if (!data || loading) {\n//     if (mobile || tablet) {\n//       return <SidebarMobileLoader />;\n//     }\n\n//     return <SidebarLoader />;\n//   }\n\n//   return (\n//     <CategoryWrapper>\n//       <PopoverWrapper>\n//         <Popover\n//           handler={\n//             <PopoverHandler>\n//               <div>\n//                 <CategoryIcon />\n//                 Select your Category\n//               </div>\n//               <div>\n//                 <ArrowDropDown />\n//               </div>\n//             </PopoverHandler>\n//           }\n//           className='category-popover'\n//           content={\n//             <TreeMenu\n//               data={data.allCategories}\n//               onClick={handleCategorySelection}\n//               active={selectedQueries}\n//             />\n//           }\n//         />\n//       </PopoverWrapper>\n\n//       <SidebarWrapper style={{ paddingTop: type === 'medicine' ? 0 : 45 }}>\n//         <Sticky enabled={isSidebarSticky} top={type === 'medicine' ? 89 : 110}>\n\n//           <Scrollbars\n//             universal\n//             autoHide\n//             autoHeight\n//             autoHeightMax={688}\n//             renderView={(props) => (\n//               <div\n//                 {...props}\n//                 style={{\n//                   ...props.style,\n//                   marginLeft: isRtl ? props.style.marginRight : 0,\n//                   marginRight: isRtl ? 0 : props.style.marginRight,\n//                 }}\n//               />\n//             )}\n//           >\n//             <TreeWrapper>\n//               <TreeMenu\n//                 data={data.allCategories}\n//                 onClick={handleCategorySelection}\n//                 active={selectedQueries}\n//               />\n//             </TreeWrapper>\n//           </Scrollbars>\n//         </Sticky>\n//       </SidebarWrapper>\n//     </CategoryWrapper>\n//   );\n// };\n\n// export default SidebarCategory;\n\n\n\nimport React, { useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport Sticky from 'react-stickynode';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Popover from 'components/Popover/Popover';\nimport { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\nimport { SearchContext } from 'contexts/search/search.context';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useStickyState } from 'contexts/app/app.provider';\nimport {\n  SidebarMobileLoader,\n  SidebarLoader,\n} from 'components/Placeholder/Placeholder';\nimport { FormattedMessage } from 'react-intl';\nimport {\n  CategoryWrapper,\n  TreeWrapper,\n  PopoverHandler,\n  PopoverWrapper,\n  SidebarWrapper,\n  RequestMedicine,\n  // Loading,\n} from './Sidebar.style';\n\nimport { TreeMenu } from 'components/TreeMenu/TreeMenu';\n\nimport { GET_CATEGORIES } from 'graphql/query/category.query';\n\ntype SidebarCategoryProps = {\n  deviceType: {\n    mobile: string;\n    tablet: string;\n    desktop: boolean;\n  };\n  type: string;\n};\n\nconst SidebarCategory: React.FC<SidebarCategoryProps> = ({\n  deviceType: { mobile, tablet },\n  type,\n}) => {\n  const { \n    state, \n    // dispatch \n  } = useContext(SearchContext);\n  const router = useRouter();\n  const { pathname, query } = router;\n  const { data, loading } = useQuery(GET_CATEGORIES, {\n    // variables: { type },\n  });\n  const selectedQueries = query.category;\n\n  const { isRtl } = useLocale();\n\n  const handleCategorySelection = (slug: string) => {\n    const updatedQuery = { category: slug };\n    if(state.text)updatedQuery.text = state.text; \n    if(state.type)updatedQuery.type = state.type; \n    router.push({\n      pathname: pathname,\n      query: updatedQuery,\n    });\n  };\n  const isSidebarSticky = useStickyState('isSidebarSticky');\n\n  if (!data || loading) {\n    if (mobile || tablet) {\n      return <SidebarMobileLoader />;\n    }\n\n    return <SidebarLoader />;\n  }\n\n  return (\n    <CategoryWrapper>\n      <PopoverWrapper>\n        <Popover\n          handler={\n            <PopoverHandler>\n              <div>\n                <CategoryIcon />\n                Select your Category\n              </div>\n              <div>\n                <ArrowDropDown />\n              </div>\n            </PopoverHandler>\n          }\n          className='category-popover'\n          content={\n            <TreeMenu\n              data={data.allCategories}\n              onClick={handleCategorySelection}\n              active={selectedQueries}\n            />\n          }\n        />\n      </PopoverWrapper>\n\n      <SidebarWrapper style={{ paddingTop: type === 'medicine' ? 0 : 45 }}>\n        <Sticky enabled={isSidebarSticky} top={type === 'medicine' ? 89 : 110}>\n\n          <Scrollbars\n            universal\n            autoHide\n            autoHeight\n            autoHeightMax={688}\n            renderView={(props) => (\n              <div\n                {...props}\n                style={{\n                  ...props.style,\n                  marginLeft: isRtl ? props.style.marginRight : 0,\n                  marginRight: isRtl ? 0 : props.style.marginRight,\n                }}\n              />\n            )}\n          >\n            <TreeWrapper>\n              <TreeMenu\n                data={data.allCategories}\n                onClick={handleCategorySelection}\n                active={selectedQueries}\n              />\n            </TreeWrapper>\n          </Scrollbars>\n        </Sticky>\n      </SidebarWrapper>\n    </CategoryWrapper>\n  );\n};\n\nexport default SidebarCategory;\n"]},"metadata":{},"sourceType":"module"}