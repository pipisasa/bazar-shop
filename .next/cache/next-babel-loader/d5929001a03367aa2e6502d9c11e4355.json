{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { Form, Formik } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/TextField/TextField';\nimport Button from 'components/Button/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { ProfileContext } from 'contexts/profile/profile.context'; // Shape of form values\n\nvar UpdateAddress = function UpdateAddress(props) {\n  _s();\n\n  var isValid = props.isValid,\n      item = props.item,\n      touched = props.touched,\n      errors = props.errors;\n  var addressValue = {\n    id: item.id,\n    type: 'secondary',\n    name: item.name,\n    info: item.info\n  };\n\n  var _useContext = useContext(ProfileContext),\n      dispatch = _useContext.dispatch;\n\n  var _useMutation = useMutation(item & item.id ? UPDATE_ADDRESS : ADD_NEW_ADDRESS),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addressMutation // { data }\n  = _useMutation2[0];\n\n  var schema = Yup.object().shape({\n    name: Yup.string().required('Title is required!'),\n    info: Yup.string().required('Address is required')\n  });\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isValid) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return addressMutation({\n                variables: addressValue\n              });\n\n            case 3:\n              // console.log(addressData, 'address data');\n              dispatch({\n                type: 'ADD_OR_UPDATE_ADDRESS',\n                payload: addressValue\n              });\n              closeModal();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Formik, {\n    initialValues: addressValue,\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        touched = _ref2.touched,\n        errors = _ref2.errors;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, __jsx(Heading, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, item && item.id ? 'Edit Address' : 'Add New Address'), __jsx(FieldWrapper, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, __jsx(TextField, {\n      id: \"name\",\n      type: \"text\",\n      placeholder: \"Enter Title\",\n      error: touched.name && errors.name,\n      value: values.name,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    })), __jsx(FieldWrapper, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, __jsx(TextField, {\n      id: \"info\",\n      as: \"textarea\",\n      placeholder: \"Enter Address\",\n      error: touched.info && errors.info,\n      value: values.info,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    })), __jsx(Button, {\n      type: \"submit\",\n      title: \"Save Address\",\n      size: \"medium\",\n      fullwidth: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }));\n  });\n};\n\n_s(UpdateAddress, \"hzpbVmhhFYwdVFH3OZJ4zv32P/0=\", false, function () {\n  return [useMutation];\n});\n\n_c = UpdateAddress;\nexport default UpdateAddress;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateAddress\");","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx"],"names":["React","useContext","Yup","Form","Formik","closeModal","TextField","Button","useMutation","UPDATE_ADDRESS","ADD_NEW_ADDRESS","FieldWrapper","Heading","ProfileContext","UpdateAddress","props","isValid","item","touched","errors","addressValue","id","type","name","info","dispatch","addressMutation","schema","object","shape","string","required","handleSubmit","variables","payload","values","handleChange","handleBlur"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form, Formik } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/TextField/TextField';\nimport Button from 'components/Button/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\n\n// Shape of form values\ninterface FormValues {\n  id?: number | null;\n  name?: string;\n  info?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n}\n\nconst UpdateAddress = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    touched,\n    errors,\n  } = props;\n  const addressValue = {\n    id: item.id,\n    type: 'secondary',\n    name: item.name,\n    info: item.info,\n  };\n  const { \n    // state, \n    dispatch \n  } = useContext(ProfileContext);\n\n  const [\n    addressMutation, \n    // { data }\n  ] = useMutation((item & item.id) ?  UPDATE_ADDRESS : ADD_NEW_ADDRESS);\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Title is required!'),\n    info: Yup.string().required('Address is required'),\n  })\n  const handleSubmit = async () => {\n    if (isValid) {\n      await addressMutation({\n        variables: addressValue,\n      });\n      // console.log(addressData, 'address data');\n      dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\n      closeModal();\n    }\n  };\n  return (\n    <Formik\n      initialValues={addressValue}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        touched,\n        errors,\n      }: FormikProps<FormValues>) => (\n        <Form>\n          <Heading>{item && item.id ? 'Edit Address' : 'Add New Address'}</Heading>\n          <FieldWrapper>\n            <TextField\n              id='name'\n              type='text'\n              placeholder='Enter Title'\n              error={touched.name && errors.name}\n              value={values.name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n          </FieldWrapper>\n\n          <FieldWrapper>\n            <TextField\n              id='info'\n              as='textarea'\n              placeholder='Enter Address'\n              error={touched.info && errors.info}\n              value={values.info}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n          </FieldWrapper>\n\n          <Button\n            type='submit'\n            title='Save Address'\n            size='medium'\n            fullwidth={true}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default UpdateAddress;\n"]},"metadata":{},"sourceType":"module"}