{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Col } from 'react-styled-flexboxgrid';\nimport { openModal } from '@redq/reuse-modal';\nimport RadioCard from 'components/RadioCard/RadioCard';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { DELETE_ADDRESS } from 'graphql/mutation/address';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_CONTACT } from 'graphql/mutation/contact';\nimport StripePaymentForm from '../../Payment/StripePaymentForm';\nimport { SettingsForm, SettingsFormContent, HeadingSection, Title, Input, Row, ButtonGroup } from './Settings.style';\nimport RadioGroup from 'components/RadioGroup/RadioGroup';\nimport PaymentGroup from 'components/PaymentGroup/PaymentGroup';\nimport UpdateAddress from '../../Checkout/Update/UpdateAddress';\nimport UpdateContact from '../../Checkout/Update/UpdateContact';\nimport Button from 'components/Button/Button';\nimport { UPDATE_ME } from 'graphql/mutation/me';\nimport { FormattedMessage } from 'react-intl';\n\nconst SettingsContent = ({\n  deviceType\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const [updateMeMutation] = useMutation(UPDATE_ME);\n  const [deleteContactMutation] = useMutation(DELETE_CONTACT);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n  const {\n    address,\n    contacts,\n    cards\n  } = state;\n  useEffect(() => {\n    const {\n      firstName,\n      lastName,\n      email\n    } = state;\n    localStorage.setItem(\"profileInfo\", JSON.stringify({\n      firstName,\n      lastName,\n      email\n    }));\n    return () => {};\n  }, []);\n\n  const handleChange = (value, field) => {\n    dispatch({\n      type: 'HANDLE_ON_INPUT_CHANGE',\n      payload: {\n        value,\n        field\n      }\n    });\n  }; // Add or edit modal\n\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-address-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  const handleEditDelete = async (item, type, name) => {\n    if (type === 'edit') {\n      const modalComponent = name === 'address' ? UpdateAddress : UpdateContact;\n      handleModal(modalComponent, item);\n    } else {\n      // console.log(name, item, type, 'delete');\n      switch (name) {\n        case 'payment':\n          dispatch({\n            type: 'DELETE_CARD',\n            payload: item.id\n          });\n          return await deletePaymentCardMutation({\n            variables: {\n              slug: item.slug\n            }\n          });\n\n        case 'contact':\n          dispatch({\n            type: 'DELETE_CONTACT',\n            payload: item.id\n          });\n          return await deleteContactMutation({\n            variables: {\n              slug: item.slug\n            }\n          });\n\n        case 'address':\n          dispatch({\n            type: 'DELETE_ADDRESS',\n            payload: item.id\n          });\n          return await deleteAddressMutation({\n            variables: {\n              slug: item.slug\n            }\n          });\n\n        default:\n          return false;\n      }\n    }\n  };\n\n  const handleSave = async () => {\n    const {\n      firstName,\n      lastName,\n      email\n    } = state;\n    const prevProfile = JSON.parse(localStorage.getItem(\"profileInfo\"));\n    const variables = Object.fromEntries(Object.entries({\n      firstName,\n      lastName,\n      email\n    }).filter(([key, val]) => val !== prevProfile[key])); // console.log(variables)\n\n    await updateMeMutation({\n      variables\n    });\n  };\n\n  return __jsx(SettingsForm, null, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"profilePageTitle\",\n    defaultMessage: \"Your Profile\"\n  }))), __jsx(Row, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Input, {\n    type: \"text\",\n    label: \"First Name\",\n    value: state.firstName,\n    onUpdate: value => handleChange(value, 'firstName'),\n    style: {\n      backgroundColor: '#F7F7F7'\n    },\n    intlInputLabelId: \"profileFirstNameField\"\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Input, {\n    type: \"text\",\n    label: \"Last Name\",\n    value: state.lastName,\n    onUpdate: value => handleChange(value, 'lastName'),\n    style: {\n      backgroundColor: '#F7F7F7'\n    },\n    intlInputLabelId: \"profileLastNameField\"\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6,\n    style: {\n      marginTop: '30px'\n    }\n  }, __jsx(Input, {\n    type: \"email\",\n    label: \"Email Address\",\n    value: state.email,\n    onUpdate: value => handleChange(value, 'email'),\n    style: {\n      backgroundColor: '#F7F7F7'\n    },\n    intlInputLabelId: \"profileEmailField\"\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Button, {\n    title: \"Save\",\n    onClick: handleSave,\n    style: {\n      width: '100%'\n    },\n    intlButtonId: \"profileSaveBtn\"\n  }))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"contactNumberTItle\",\n    defaultMessage: \"Contact Numbers\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroup, {\n    items: contacts,\n    component: item => __jsx(RadioCard, {\n      id: item.id,\n      key: item.id,\n      title: item.Type,\n      content: item.number,\n      checked: item.Type === 'primary',\n      onChange: () => dispatch({\n        type: 'SET_PRIMARY_CONTACT',\n        payload: item.id.toString()\n      }),\n      name: \"contact\",\n      onEdit: () => handleEditDelete(item, 'edit', 'contact'),\n      onDelete: () => handleEditDelete(item, 'delete', 'contact')\n    }),\n    secondaryComponent: __jsx(Button, {\n      title: \"Add Contact\",\n      iconPosition: \"right\",\n      colors: \"primary\",\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      intlButtonId: \"addContactBtn\",\n      onClick: () => handleModal(UpdateContact, {}, 'add-contact-modal')\n    })\n  }))))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12,\n    style: {\n      position: 'relative'\n    }\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"deliveryAddresTitle\",\n    defaultMessage: \"Delivery Address\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroup, {\n    items: address,\n    component: item => __jsx(RadioCard, {\n      id: item.id,\n      key: item.id,\n      title: item.name,\n      content: item.info,\n      name: \"address\",\n      checked: item.Type === 'primary',\n      onChange: () => dispatch({\n        type: 'SET_PRIMARY_ADDRESS',\n        payload: item.id.toString()\n      }),\n      onEdit: () => handleEditDelete(item, 'edit', 'address'),\n      onDelete: () => handleEditDelete(item, 'delete', 'address')\n    }),\n    secondaryComponent: __jsx(Button, {\n      title: \"Add Adderss\",\n      iconPosition: \"right\",\n      colors: \"primary\",\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      intlButtonId: \"addAddressBtn\",\n      onClick: () => handleModal(UpdateAddress, {}, 'add-address-modal')\n    })\n  }))))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"paymentCardTitle\",\n    defaultMessage: \"Payments Card\"\n  }))), __jsx(PaymentGroup, {\n    name: \"payment\",\n    deviceType: deviceType,\n    items: cards,\n    onEditDeleteField: (item, Type) => handleEditDelete(item, Type, 'payment'),\n    onChange: item => dispatch({\n      type: 'SET_PRIMARY_CARD',\n      payload: item.id.toString()\n    }),\n    handleAddNewCard: () => {\n      handleModal(StripePaymentForm, {\n        buttonText: 'Add Card'\n      }, 'add-address-modal stripe-modal');\n    }\n  }))))));\n};\n\nexport default SettingsContent;","map":null,"metadata":{},"sourceType":"module"}