{"ast":null,"code":"var _jsxFileName = \"/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react'; // import styled from 'styled-components';\n// import { themeGet } from '@styled-system/theme-get';\n\nimport * as Yup from 'yup';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Formik, Form } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport Button from 'components/Button/Button';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport TextField from 'components/TextField/TextField';\nconst AddressValidationSchema = Yup.object().shape({\n  name: Yup.string().required('Title is required'),\n  info: Yup.string().required('Address is required')\n});\n\nconst UpdateAddress = ({\n  item\n}) => {\n  const initialValues = {\n    id: item.id || null,\n    slug: item.slug || null,\n    type: item.type || 'secondary',\n    name: item.name || \"\",\n    info: item.info || \"\"\n  };\n  const [addAddressMutation] = item && item.slug ? useMutation(UPDATE_ADDRESS) : useMutation(ADD_NEW_ADDRESS);\n  const {\n    // state, \n    dispatch\n  } = useContext(ProfileContext);\n\n  const handleSubmit = async (values, {\n    setSubmitting\n  }) => {\n    // console.log(values)\n    const {\n      data\n    } = await addAddressMutation({\n      variables: values\n    }); // console.log(values, 'formik values');\n\n    dispatch({\n      type: 'ADD_OR_UPDATE_ADDRESS',\n      payload: data\n    });\n    closeModal();\n    setSubmitting(false);\n  };\n\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: AddressValidationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    handleChange,\n    handleBlur,\n    isSubmitting,\n    touched,\n    errors\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, item && item.id ? 'Edit Address' : 'Add New Address'), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 12\n    }\n  }, __jsx(TextField, {\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Enter Title\",\n    error: touched.name && errors.name,\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 14\n    }\n  })), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }\n  }, __jsx(TextField, {\n    id: \"info\",\n    as: \"textarea\",\n    placeholder: \"Enter Address\",\n    error: touched.info && errors.info,\n    value: values.info,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 14\n    }\n  })), __jsx(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    title: \"Save Contact\",\n    size: \"medium\",\n    fullwidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default UpdateAddress; // const StyledInput = styled.input`\n//   width: 100%;\n//   height: 54px;\n//   border-radius: 6px;\n//   font-family: ${themeGet('colors.fontFamily', 'Lato, sans-serif')};\n//   border: 1px solid ${themeGet('colors.borderColor', '#e6e6e6')};\n//   color: ${themeGet('colors.darkBold', '#0D1136')};\n//   font-size: 16px;\n//   line-height: 19px;\n//   font-weight: 400;\n//   padding: 0 18px;\n//   box-sizing: border-box;\n//   transition: border-color 0.25s ease;\n//   &:hover,\n//   &:focus {\n//     outline: 0;\n//   }\n//   &:focus {\n//     border-color: ${themeGet('colors.primary', '#009e7f')};\n//   }\n//   &::placeholder {\n//     color: ${themeGet('colorsdarkRegular', '#77798C')};\n//   }\n// `;\n// const StyledError = styled.div`\n//   color: red;\n//   padding-bottom: 10px;\n//   margin-top: -5px;\n// `;","map":{"version":3,"sources":["/Users/pipi/Documents/pr/react_apps/shop/containers/Checkout/Update/UpdateAddress.tsx"],"names":["React","useContext","Yup","closeModal","Formik","Form","useMutation","ProfileContext","Button","FieldWrapper","Heading","UPDATE_ADDRESS","ADD_NEW_ADDRESS","TextField","AddressValidationSchema","object","shape","name","string","required","info","UpdateAddress","item","initialValues","id","slug","type","addAddressMutation","dispatch","handleSubmit","values","setSubmitting","data","variables","payload","handleChange","handleBlur","isSubmitting","touched","errors"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\n// import styled from 'styled-components';\n// import { themeGet } from '@styled-system/theme-get';\nimport * as Yup from 'yup';\nimport { closeModal } from '@redq/reuse-modal';\nimport { FormikProps, Formik, Form } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport Button from 'components/Button/Button';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { UPDATE_ADDRESS, ADD_NEW_ADDRESS } from 'graphql/mutation/address';\nimport TextField from 'components/TextField/TextField';\n\ntype Props = {\n  item?: any | null;\n};\n// Shape of form values\ntype FormValues = {\n  id?: number | null;\n  type?: string;\n  name: string;\n  info: string;\n};\n\nconst AddressValidationSchema = Yup.object().shape({\n  name: Yup.string().required('Title is required'),\n  info: Yup.string().required('Address is required'),\n});\n\nconst UpdateAddress: React.FC<Props> = ({ item }) => {\n  const initialValues = {\n    id: item.id || null,\n    slug: item.slug || null,\n    type: item.type || 'secondary',\n    name: item.name || \"\",\n    info: item.info || \"\",\n  };\n  const [addAddressMutation] = (item && item.slug) ? useMutation(UPDATE_ADDRESS) : useMutation(ADD_NEW_ADDRESS);\n  const { \n    // state, \n  dispatch } = useContext(ProfileContext);\n  const handleSubmit = async (values: FormValues, { setSubmitting }: any) => {\n    // console.log(values)\n    const {data} = await addAddressMutation({\n      variables: values,\n    });\n    // console.log(values, 'formik values');\n    dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: data });\n    closeModal();\n    setSubmitting(false);\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={AddressValidationSchema}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        isSubmitting,\n        touched,\n        errors\n      }: FormikProps<FormValues>) => (\n        <Form>\n          <Heading>{item && item.id ? 'Edit Address' : 'Add New Address'}</Heading>\n           <FieldWrapper>\n             <TextField\n               id='name'\n               type='text'\n               placeholder='Enter Title'\n               error={touched.name && errors.name}\n               value={values.name}\n               onChange={handleChange}\n               onBlur={handleBlur}\n             />\n           </FieldWrapper>\n\n           <FieldWrapper>\n             <TextField\n               id='info'\n               as='textarea'\n               placeholder='Enter Address'\n               error={touched.info && errors.info}\n               value={values.info}\n               onChange={handleChange}\n               onBlur={handleBlur}\n             />\n           </FieldWrapper>\n\n          <Button\n            disabled={isSubmitting}\n            type='submit'\n            title='Save Contact'\n            size='medium'\n            fullwidth={true}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default UpdateAddress;\n\n// const StyledInput = styled.input`\n//   width: 100%;\n//   height: 54px;\n//   border-radius: 6px;\n//   font-family: ${themeGet('colors.fontFamily', 'Lato, sans-serif')};\n//   border: 1px solid ${themeGet('colors.borderColor', '#e6e6e6')};\n//   color: ${themeGet('colors.darkBold', '#0D1136')};\n//   font-size: 16px;\n//   line-height: 19px;\n//   font-weight: 400;\n//   padding: 0 18px;\n//   box-sizing: border-box;\n//   transition: border-color 0.25s ease;\n\n//   &:hover,\n//   &:focus {\n//     outline: 0;\n//   }\n\n//   &:focus {\n//     border-color: ${themeGet('colors.primary', '#009e7f')};\n//   }\n\n//   &::placeholder {\n//     color: ${themeGet('colorsdarkRegular', '#77798C')};\n//   }\n// `;\n\n// const StyledError = styled.div`\n//   color: red;\n//   padding-bottom: 10px;\n//   margin-top: -5px;\n// `;"]},"metadata":{},"sourceType":"module"}