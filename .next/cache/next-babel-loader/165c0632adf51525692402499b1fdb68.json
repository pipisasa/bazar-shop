{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import React, { useContext } from 'react';\n// import { useRouter } from 'next/router';\n// import Link from 'next/link';\n// import { useQuery } from '@apollo/react-hooks';\n// import Sticky from 'react-stickynode';\n// import { Scrollbars } from 'react-custom-scrollbars';\n// import Popover from 'components/Popover/Popover';\n// import { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\n// import { SearchContext } from 'contexts/search/search.context';\n// import { useLocale } from 'contexts/language/language.provider';\n// import { useStickyState } from 'contexts/app/app.provider';\n// import {\n//   SidebarMobileLoader,\n//   SidebarLoader,\n// } from 'components/Placeholder/Placeholder';\n// import { FormattedMessage } from 'react-intl';\n// import {\n//   CategoryWrapper,\n//   TreeWrapper,\n//   PopoverHandler,\n//   PopoverWrapper,\n//   SidebarWrapper,\n//   RequestMedicine,\n//   Loading,\n// } from './Sidebar.style';\n// import { TreeMenu } from 'components/TreeMenu/TreeMenu';\n// import { GET_CATEGORIES } from 'graphql/query/category.query';\n// type SidebarCategoryProps = {\n//   deviceType: {\n//     mobile: string;\n//     tablet: string;\n//     desktop: boolean;\n//   };\n//   type: string;\n// };\n// const SidebarCategory: React.FC<SidebarCategoryProps> = ({\n//   deviceType: { mobile, tablet, desktop },\n//   type,\n// }) => {\n//   const { state, dispatch } = useContext(SearchContext);\n//   const router = useRouter();\n//   const { pathname, query } = router;\n//   const { data, loading } = useQuery(GET_CATEGORIES);\n//   const selectedQueries = query.category;\n//   const { isRtl } = useLocale();\n//   const handleCategorySelection = (slug: string) => {\n//     const updatedQuery:any = {};\n//     if(state.text) updatedQuery.text = state.text;\n//     if(slug || typeof slug === 'string') updatedQuery.category = slug\n//     router.push({\n//       pathname: pathname,\n//       query: updatedQuery,\n//     });\n//   };\n//   const isSidebarSticky = useStickyState('isSidebarSticky');\n//   if (!data || loading) {\n//     if (mobile || tablet) {\n//       return <SidebarMobileLoader />;\n//     }\n//     return <SidebarLoader />;\n//   }\n//   return (\n//     <CategoryWrapper>\n//       <PopoverWrapper>\n//         <Popover\n//           handler={\n//             <PopoverHandler>\n//               <div>\n//                 <CategoryIcon />\n//                 Select your Category\n//               </div>\n//               <div>\n//                 <ArrowDropDown />\n//               </div>\n//             </PopoverHandler>\n//           }\n//           className='category-popover'\n//           content={\n//             <TreeMenu\n//               data={data.allCategories}\n//               onClick={handleCategorySelection}\n//               active={selectedQueries}\n//             />\n//           }\n//         />\n//       </PopoverWrapper>\n//       <SidebarWrapper style={{ paddingTop: type === 'medicine' ? 0 : 45 }}>\n//         <Sticky enabled={isSidebarSticky} top={type === 'medicine' ? 89 : 110}>\n//           <Scrollbars\n//             universal\n//             autoHide\n//             autoHeight\n//             autoHeightMax={688}\n//             renderView={(props) => (\n//               <div\n//                 {...props}\n//                 style={{\n//                   ...props.style,\n//                   marginLeft: isRtl ? props.style.marginRight : 0,\n//                   marginRight: isRtl ? 0 : props.style.marginRight,\n//                 }}\n//               />\n//             )}\n//           >\n//             <TreeWrapper>\n//               <TreeMenu\n//                 data={data.allCategories}\n//                 onClick={handleCategorySelection}\n//                 active={selectedQueries}\n//               />\n//             </TreeWrapper>\n//           </Scrollbars>\n//         </Sticky>\n//       </SidebarWrapper>\n//     </CategoryWrapper>\n//   );\n// };\n// export default SidebarCategory;\nimport React, { useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport Sticky from 'react-stickynode';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Popover from 'components/Popover/Popover';\nimport { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\nimport { SearchContext } from 'contexts/search/search.context';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useStickyState } from 'contexts/app/app.provider';\nimport { SidebarMobileLoader, SidebarLoader } from 'components/Placeholder/Placeholder';\nimport { CategoryWrapper, TreeWrapper, PopoverHandler, PopoverWrapper, SidebarWrapper // Loading,\n} from './Sidebar.style';\nimport { TreeMenu } from 'components/TreeMenu/TreeMenu';\nimport { GET_CATEGORIES } from 'graphql/query/category.query';\n\nconst SidebarCategory = ({\n  deviceType: {\n    mobile,\n    tablet\n  },\n  type\n}) => {\n  const {\n    state // dispatch \n\n  } = useContext(SearchContext);\n  const router = useRouter();\n  const {\n    pathname,\n    query\n  } = router;\n  const {\n    data,\n    loading\n  } = useQuery(GET_CATEGORIES, {// variables: { type },\n  });\n  const selectedQueries = query.category;\n  const {\n    isRtl\n  } = useLocale();\n\n  const handleCategorySelection = slug => {\n    // console.log(state, \"query\")\n    const updatedQuery = state.text ? {\n      text: state.text,\n      category: slug\n    } : {\n      category: slug\n    };\n    router.push({\n      pathname: pathname,\n      query: updatedQuery\n    });\n  };\n\n  const isSidebarSticky = useStickyState('isSidebarSticky');\n\n  if (!data || loading) {\n    if (mobile || tablet) {\n      return __jsx(SidebarMobileLoader, null);\n    }\n\n    return __jsx(SidebarLoader, null);\n  }\n\n  return __jsx(CategoryWrapper, null, __jsx(PopoverWrapper, null, __jsx(Popover, {\n    handler: __jsx(PopoverHandler, null, __jsx(\"div\", null, __jsx(CategoryIcon, null), \"Select your Category\"), __jsx(\"div\", null, __jsx(ArrowDropDown, null))),\n    className: \"category-popover\",\n    content: __jsx(TreeMenu, {\n      data: data.allCategories,\n      onClick: handleCategorySelection,\n      active: selectedQueries\n    })\n  })), __jsx(SidebarWrapper, {\n    style: {\n      paddingTop: type === 'medicine' ? 0 : 45\n    }\n  }, __jsx(Sticky, {\n    enabled: isSidebarSticky,\n    top: type === 'medicine' ? 89 : 110\n  }, __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: 688,\n    renderView: props => __jsx(\"div\", _extends({}, props, {\n      style: _objectSpread(_objectSpread({}, props.style), {}, {\n        marginLeft: isRtl ? props.style.marginRight : 0,\n        marginRight: isRtl ? 0 : props.style.marginRight\n      })\n    }))\n  }, __jsx(TreeWrapper, null, __jsx(TreeMenu, {\n    data: data.allCategories,\n    onClick: handleCategorySelection,\n    active: selectedQueries\n  }))))));\n};\n\nexport default SidebarCategory;","map":null,"metadata":{},"sourceType":"module"}