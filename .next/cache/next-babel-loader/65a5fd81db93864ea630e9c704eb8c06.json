{"ast":null,"code":"var _jsxFileName = \"/Users/pipi/Documents/pr/shop/components/SearchBox/SearchBox.tsx\";\nvar __jsx = React.createElement;\nimport InputSearch from './Input';\nimport React, { useEffect, useRef, useState } from 'react';\nimport SearchResults from './SearchResults';\nimport SearchWrapper, { SearchBoxWrapper, CurrentType } from './SearchBox.style';\nimport { SearchIcon } from '../AllSvgIcon';\n\nconst Search = ({\n  suggestions,\n  buttonText,\n  buttonIcon,\n  inputStyle,\n  style,\n  bordered,\n  hideType,\n  showSvg,\n  autoSuggestion,\n  className,\n  handleSearch,\n  onClick,\n  value,\n  expand,\n  minimal,\n  pathname\n}) => {\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState('');\n  const {\n    0: toggleSuggestion,\n    1: setToggleSuggestion\n  } = useState(false);\n  const {\n    0: toggleSearch,\n    1: setToggleSearch\n  } = useState(false);\n  let searchRef = useRef(null);\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, false);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, false);\n    };\n  }, []);\n\n  const handleSearchInput = event => {\n    setSearchValue(event.target.value);\n    setToggleSuggestion(true);\n    handleSearch(event.target.value);\n  };\n\n  const ucwords = str => {\n    const newString = str.replace(/\\//g, '');\n    const humanString = newString.replace(/-/g, ' ');\n    return (humanString + '').replace(/^([a-z])|\\s+([a-z])/g, function ($1) {\n      return $1.toUpperCase();\n    });\n  };\n\n  const setSuggestion = suggestion => {\n    setSearchValue(suggestion);\n    setToggleSuggestion(false);\n  };\n\n  const handleClickOutside = event => {\n    if (searchRef.current && !searchRef.current.contains(event.target)) {\n      setToggleSuggestion(false);\n      setToggleSearch(false);\n    }\n  };\n\n  const onClearBtnClick = () => {\n    setSearchValue('');\n  };\n\n  return __jsx(SearchWrapper, {\n    className: className,\n    ref: searchRef,\n    style: style,\n    autoSuggestion: autoSuggestion,\n    hideType: hideType,\n    expand: expand,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, __jsx(SearchBoxWrapper, {\n    className: `${hideType ? 'hideType' : ''} ${expand === true ? toggleSearch ? 'expanded' : 'collapsed' : ''} ${minimal === true ? 'minimal' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, pathname && pathname !== '/' ? __jsx(CurrentType, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, ucwords(pathname)) : __jsx(CurrentType, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Grocery\"), __jsx(InputSearch, {\n    type: \"text\",\n    value: value,\n    onChange: handleSearchInput,\n    onFocus: () => setToggleSearch(true),\n    onBlur: () => setToggleSearch(false),\n    buttonIcon: buttonIcon,\n    buttonText: buttonText,\n    style: inputStyle,\n    bordered: bordered,\n    showSvg: showSvg,\n    onClick: () => onClick(searchValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  })), autoSuggestion && toggleSuggestion ? __jsx(SearchResults, {\n    suggestions: suggestions,\n    clearSearch: onClearBtnClick,\n    setSuggestionValue: suggestion => setSuggestion(suggestion),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\nSearch.defaultProps = {\n  bordered: false,\n  autoSuggestion: false,\n  buttonText: 'Search',\n  buttonIcon: __jsx(SearchIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }),\n  inputStyle: {\n    width: '100%'\n  }\n};\nexport default Search;","map":{"version":3,"sources":["/Users/pipi/Documents/pr/shop/components/SearchBox/SearchBox.tsx"],"names":["InputSearch","React","useEffect","useRef","useState","SearchResults","SearchWrapper","SearchBoxWrapper","CurrentType","SearchIcon","Search","suggestions","buttonText","buttonIcon","inputStyle","style","bordered","hideType","showSvg","autoSuggestion","className","handleSearch","onClick","value","expand","minimal","pathname","searchValue","setSearchValue","toggleSuggestion","setToggleSuggestion","toggleSearch","setToggleSearch","searchRef","document","addEventListener","handleClickOutside","removeEventListener","handleSearchInput","event","target","ucwords","str","newString","replace","humanString","$1","toUpperCase","setSuggestion","suggestion","current","contains","onClearBtnClick","defaultProps","width"],"mappings":"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","sourcesContent":["import InputSearch from './Input';\nimport React, { useEffect, useRef, useState } from 'react';\nimport SearchResults from './SearchResults';\nimport SearchWrapper, {\n  SearchBoxWrapper,\n  CurrentType,\n} from './SearchBox.style';\nimport { SearchIcon } from '../AllSvgIcon';\n\ntype SearchBoxProps = {\n  suggestions?: string[];\n  buttonText?: string;\n  buttonIcon?: React.ReactNode;\n  inputStyle?: React.CSSProperties;\n  style?: React.CSSProperties;\n  bordered?: boolean;\n  hideType?: boolean;\n  showSvg?: boolean;\n  expand?: boolean;\n  minimal?: boolean;\n  autoSuggestion?: boolean;\n  placeholder?: string;\n  className?: string;\n  handleSearch?: Function;\n  onClick?: Function;\n  value?: any;\n  pathname?: string;\n};\n\nconst Search: React.FC<SearchBoxProps> = ({\n  suggestions,\n  buttonText,\n  buttonIcon,\n  inputStyle,\n  style,\n  bordered,\n  hideType,\n  showSvg,\n  autoSuggestion,\n  className,\n  handleSearch,\n  onClick,\n  value,\n  expand,\n  minimal,\n  pathname,\n}) => {\n  const [searchValue, setSearchValue] = useState('');\n  const [toggleSuggestion, setToggleSuggestion] = useState(false);\n  const [toggleSearch, setToggleSearch] = useState(false);\n\n  let searchRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, false);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, false);\n    };\n  }, []);\n\n  const handleSearchInput = (event: any) => {\n    setSearchValue(event.target.value);\n    setToggleSuggestion(true);\n    handleSearch(event.target.value);\n  };\n\n  const ucwords = (str: string) => {\n    const newString = str.replace(/\\//g, '');\n    const humanString = newString.replace(/-/g, ' ');\n    return (humanString + '').replace(/^([a-z])|\\s+([a-z])/g, function ($1) {\n      return $1.toUpperCase();\n    });\n  };\n\n  const setSuggestion = (suggestion: any) => {\n    setSearchValue(suggestion);\n    setToggleSuggestion(false);\n  };\n\n  const handleClickOutside = (event: any) => {\n    if (searchRef.current && !searchRef.current.contains(event.target)) {\n      setToggleSuggestion(false);\n      setToggleSearch(false);\n    }\n  };\n\n  const onClearBtnClick = () => {\n    setSearchValue('');\n  };\n\n  return (\n    <SearchWrapper\n      className={className}\n      ref={searchRef}\n      style={style}\n      autoSuggestion={autoSuggestion}\n      hideType={hideType}\n      expand={expand}\n    >\n      <SearchBoxWrapper\n        className={`${hideType ? 'hideType' : ''} ${\n          expand === true ? (toggleSearch ? 'expanded' : 'collapsed') : ''\n        } ${minimal === true ? 'minimal' : ''}`}\n      >\n        {pathname && pathname !== '/' ? (\n          <CurrentType>{ucwords(pathname)}</CurrentType>\n        ) : (\n          <CurrentType>Grocery</CurrentType>\n        )}\n\n        <InputSearch\n          type=\"text\"\n          value={value}\n          onChange={handleSearchInput}\n          onFocus={() => setToggleSearch(true)}\n          onBlur={() => setToggleSearch(false)}\n          buttonIcon={buttonIcon}\n          buttonText={buttonText}\n          style={inputStyle}\n          bordered={bordered}\n          showSvg={showSvg}\n          onClick={() => onClick(searchValue)}\n        />\n      </SearchBoxWrapper>\n      {autoSuggestion && toggleSuggestion ? (\n        <SearchResults\n          suggestions={suggestions}\n          clearSearch={onClearBtnClick}\n          setSuggestionValue={(suggestion: any) => setSuggestion(suggestion)}\n        />\n      ) : null}\n    </SearchWrapper>\n  );\n};\n\nSearch.defaultProps = {\n  bordered: false,\n  autoSuggestion: false,\n  buttonText: 'Search',\n  buttonIcon: <SearchIcon />,\n  inputStyle: {\n    width: '100%',\n  },\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}