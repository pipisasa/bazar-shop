{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport Sticky from 'react-stickynode';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Popover from 'components/Popover/Popover';\nimport { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\nimport { SearchContext } from 'contexts/search/search.context';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useStickyState } from 'contexts/app/app.provider';\nimport { SidebarMobileLoader, SidebarLoader } from 'components/Placeholder/Placeholder';\nimport { CategoryWrapper, TreeWrapper, PopoverHandler, PopoverWrapper, SidebarWrapper } from './Sidebar.style';\nimport { TreeMenu } from 'components/TreeMenu/TreeMenu';\nimport { GET_CATEGORIES } from 'graphql/query/category.query';\n\nvar SidebarCategory = function SidebarCategory(_ref) {\n  var _ref$deviceType = _ref.deviceType,\n      mobile = _ref$deviceType.mobile,\n      tablet = _ref$deviceType.tablet,\n      desktop = _ref$deviceType.desktop,\n      type = _ref.type;\n\n  var _useContext = useContext(SearchContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var router = useRouter();\n  var pathname = router.pathname,\n      query = router.query;\n\n  var _useQuery = useQuery(GET_CATEGORIES),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  var selectedQueries = query.category;\n\n  var _useLocale = useLocale(),\n      isRtl = _useLocale.isRtl;\n\n  var handleCategorySelection = function handleCategorySelection(slug) {\n    var updatedQuery = {};\n    if (state.text) updatedQuery.text = state.text;\n    if (slug || typeof slug === 'string') updatedQuery.category = slug;\n    router.push({\n      pathname: pathname,\n      query: updatedQuery\n    });\n  };\n\n  var isSidebarSticky = useStickyState('isSidebarSticky');\n\n  if (!data || loading) {\n    if (mobile || tablet) {\n      return __jsx(SidebarMobileLoader, null);\n    }\n\n    return __jsx(SidebarLoader, null);\n  }\n\n  return __jsx(CategoryWrapper, null, __jsx(PopoverWrapper, null, __jsx(Popover, {\n    handler: __jsx(PopoverHandler, null, __jsx(\"div\", null, __jsx(CategoryIcon, null), \"Select your Category\"), __jsx(\"div\", null, __jsx(ArrowDropDown, null))),\n    className: \"category-popover\",\n    content: __jsx(TreeMenu, {\n      data: data.allCategories,\n      onClick: handleCategorySelection,\n      active: selectedQueries\n    })\n  })), __jsx(SidebarWrapper, {\n    style: {\n      paddingTop: type === 'medicine' ? 0 : 45\n    }\n  }, __jsx(Sticky, {\n    enabled: isSidebarSticky,\n    top: type === 'medicine' ? 89 : 110\n  }, __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: 688,\n    renderView: function renderView(props) {\n      return __jsx(\"div\", _extends({}, props, {\n        style: _objectSpread(_objectSpread({}, props.style), {}, {\n          marginLeft: isRtl ? props.style.marginRight : 0,\n          marginRight: isRtl ? 0 : props.style.marginRight\n        })\n      }));\n    }\n  }, __jsx(TreeWrapper, null, __jsx(TreeMenu, {\n    data: data.allCategories,\n    onClick: handleCategorySelection,\n    active: selectedQueries\n  }))))));\n};\n\nexport default SidebarCategory;","map":null,"metadata":{},"sourceType":"module"}