{"ast":null,"code":"var _jsxFileName = \"/Users/pipi/Documents/pr/shop/containers/Payment/StripePaymentForm.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { CardElement, injectStripe, Elements, StripeProvider } from 'react-stripe-elements';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './StripePaymentForm.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nconst StripeForm = injectStripe(({\n  getToken,\n  buttonText,\n  stripe\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n\n  const handleSubmit = async () => {\n    let {\n      token\n    } = await stripe.createToken({\n      name: 'Name'\n    });\n    getToken(token);\n\n    if (token) {\n      dispatch({\n        type: 'ADD_CARD',\n        payload: token.card\n      });\n      closeModal();\n    }\n\n    console.log(token, 'token');\n  };\n\n  return __jsx(StripeFormWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Enter card info\"), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  })), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, buttonText ? buttonText : 'Pay Now'));\n});\n\nconst StripePaymentForm = ({\n  item: {\n    price,\n    buttonText\n  }\n}) => {\n  const [getPayment] = useMutation(GET_PAYMENT);\n\n  const sendTokenToServer = async token => {\n    const payment_info = await getPayment({\n      variables: {\n        paymentInput: JSON.stringify({\n          token,\n          amount: price\n        })\n      }\n    });\n    console.log(payment_info, 'payment_info');\n  };\n\n  return false && __jsx(StripeProvider, {\n    apiKey: process.env.STRIPE_PUBLIC_KEY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(Elements, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(StripeForm, {\n    getToken: token => sendTokenToServer(token),\n    buttonText: buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default StripePaymentForm;","map":{"version":3,"sources":["/Users/pipi/Documents/pr/shop/containers/Payment/StripePaymentForm.tsx"],"names":["React","useContext","CardElement","injectStripe","Elements","StripeProvider","useMutation","closeModal","GET_PAYMENT","StripeFormWrapper","Heading","FieldWrapper","ProfileContext","StripeForm","getToken","buttonText","stripe","state","dispatch","handleSubmit","token","createToken","name","type","payload","card","console","log","StripePaymentForm","item","price","getPayment","sendTokenToServer","payment_info","variables","paymentInput","JSON","stringify","amount","process","env","STRIPE_PUBLIC_KEY"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport {\n  CardElement,\n  injectStripe,\n  Elements,\n  StripeProvider,\n  ReactStripeElements,\n} from 'react-stripe-elements';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, {\n  Heading,\n  FieldWrapper,\n} from './StripePaymentForm.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\ntype StripeFormProps = ReactStripeElements.InjectedStripeProps & {\n  getToken: any;\n  buttonText: string;\n};\nconst StripeForm = injectStripe(\n  ({ getToken, buttonText, stripe }: StripeFormProps) => {\n    const { state, dispatch } = useContext(ProfileContext);\n    const handleSubmit = async () => {\n      let { token } = await stripe.createToken({ name: 'Name' });\n      getToken(token);\n      if (token) {\n        dispatch({ type: 'ADD_CARD', payload: token.card });\n        closeModal();\n      }\n      console.log(token, 'token');\n    };\n    return (\n      <StripeFormWrapper>\n        <Heading>Enter card info</Heading>\n        <FieldWrapper>\n          <CardElement />\n        </FieldWrapper>\n        <button type=\"button\" onClick={handleSubmit}>\n          {buttonText ? buttonText : 'Pay Now'}\n        </button>\n      </StripeFormWrapper>\n    );\n  }\n);\ntype Item = {\n  item: {\n    price: any;\n    buttonText: string;\n  };\n};\nconst StripePaymentForm = ({ item: { price, buttonText } }: Item) => {\n  const [getPayment] = useMutation(GET_PAYMENT);\n  const sendTokenToServer = async (token: any) => {\n    const payment_info = await getPayment({\n      variables: { paymentInput: JSON.stringify({ token, amount: price }) },\n    });\n    console.log(payment_info, 'payment_info');\n  };\n\n  return (\n    process.browser && (\n      <StripeProvider apiKey={process.env.STRIPE_PUBLIC_KEY}>\n        <div className=\"example\">\n          <Elements>\n            <StripeForm\n              getToken={token => sendTokenToServer(token)}\n              buttonText={buttonText}\n            />\n          </Elements>\n        </div>\n      </StripeProvider>\n    )\n  );\n};\n\nexport default StripePaymentForm;\n"]},"metadata":{},"sourceType":"module"}