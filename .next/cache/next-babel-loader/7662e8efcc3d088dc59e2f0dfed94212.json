{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer } from 'react'; // import uuidV4 from 'uuid/v4';\n\nimport schedules from 'containers/Checkout/data';\nimport { ProfileContext } from './profile.context';\n\nfunction reducer(state, action) {\n  // console.log(action)\n  switch (action.type) {\n    case 'UPDATE_ME_INFO':\n      return _objectSpread(_objectSpread({}, action.payload), {}, {\n        schedules\n      });\n\n    case 'HANDLE_ON_INPUT_CHANGE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [action.payload.field]: action.payload.value\n      });\n\n    case 'ADD_OR_UPDATE_CONTACT':\n      if (action.payload.updateContact) {\n        const {\n          payload: {\n            updateContact: {\n              contact\n            }\n          }\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          contacts: state.contacts.map(item => item.id === contact.id ? _objectSpread(_objectSpread({}, item), contact) : item)\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: [...state.contacts, action.payload.createContact.contact]\n      });\n\n    case 'DELETE_CONTACT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: state.contacts.filter(item => item.id !== action.payload)\n      });\n\n    case 'ADD_OR_UPDATE_ADDRESS':\n      if (action.payload.updateAddress) {\n        const {\n          payload: {\n            updateAddress: {\n              address\n            }\n          }\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          address: state.address.map(item => item.id === address.id ? _objectSpread(_objectSpread({}, item), address) : item)\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        address: [...state.address, action.payload.createAddress.address]\n      });\n\n    case 'DELETE_ADDRESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        address: state.address.filter(item => item.id !== action.payload)\n      });\n\n    case 'ADD_CARD':\n      const newCard = {\n        id: action.payload.id,\n        Type: state.cards.length === '0' ? 'primary' : 'secondary',\n        cardType: action.payload.brand.toLowerCase(),\n        firstName: state.firstName,\n        lastName: state.lastName,\n        lastFourDigit: action.payload.last4\n      };\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cards: [newCard, ...state.cards]\n      });\n\n    case 'DELETE_CARD':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cards: state.cards.filter(item => item.id !== action.payload)\n      });\n\n    case 'SET_PRIMARY_CONTACT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: state.contacts.map(item => item.id === action.payload ? _objectSpread(_objectSpread({}, item), {}, {\n          Type: 'primary'\n        }) : _objectSpread(_objectSpread({}, item), {}, {\n          Type: 'secondary'\n        }))\n      });\n\n    case 'SET_PRIMARY_ADDRESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        address: state.address.map(item => item.id === action.payload ? _objectSpread(_objectSpread({}, item), {}, {\n          Type: 'primary'\n        }) : _objectSpread(_objectSpread({}, item), {}, {\n          Type: 'secondary'\n        }))\n      });\n\n    case 'SET_PRIMARY_SCHEDULE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        schedules: state.schedules.map(item => item.id === action.payload ? _objectSpread(_objectSpread({}, item), {}, {\n          Type: 'primary'\n        }) : _objectSpread(_objectSpread({}, item), {}, {\n          Type: 'secondary'\n        }))\n      });\n\n    case 'SET_PRIMARY_CARD':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cards: state.cards.map(item => item.id === action.payload ? _objectSpread(_objectSpread({}, item), {}, {\n          Type: 'primary'\n        }) : _objectSpread(_objectSpread({}, item), {}, {\n          Type: 'secondary'\n        }))\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport const ProfileProvider = ({\n  children,\n  initData\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, _objectSpread(_objectSpread({}, initData), {}, {\n    schedules\n  })); // console.log(state, 'profile provider state');\n\n  return __jsx(ProfileContext.Provider, {\n    value: {\n      state,\n      dispatch\n    }\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}